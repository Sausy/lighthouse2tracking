// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lighthouse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lighthouse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mkr1000 {
namespace lighthouse {

namespace {

const ::google::protobuf::Descriptor* configObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  configObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* trackedObjectConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trackedObjectConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* loggingObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loggingObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* commandObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  commandObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* imuObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  imuObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* lighthouseMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lighthouseMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lighthouse_2eproto() {
  protobuf_AddDesc_lighthouse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lighthouse.proto");
  GOOGLE_CHECK(file != NULL);
  configObject_descriptor_ = file->message_type(0);
  static const int configObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configObject, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configObject, logging_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configObject, sensor_port_),
  };
  configObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      configObject_descriptor_,
      configObject::default_instance_,
      configObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(configObject));
  trackedObjectConfig_descriptor_ = file->message_type(1);
  static const int trackedObjectConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trackedObjectConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trackedObjectConfig, command_port_),
  };
  trackedObjectConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trackedObjectConfig_descriptor_,
      trackedObjectConfig::default_instance_,
      trackedObjectConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trackedObjectConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trackedObjectConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trackedObjectConfig));
  loggingObject_descriptor_ = file->message_type(2);
  static const int loggingObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loggingObject, message_),
  };
  loggingObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loggingObject_descriptor_,
      loggingObject::default_instance_,
      loggingObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loggingObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loggingObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loggingObject));
  commandObject_descriptor_ = file->message_type(3);
  static const int commandObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commandObject, command_),
  };
  commandObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      commandObject_descriptor_,
      commandObject::default_instance_,
      commandObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commandObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commandObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(commandObject));
  imuObject_descriptor_ = file->message_type(4);
  static const int imuObject_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imuObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imuObject, quaternion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imuObject, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imuObject, gravity_),
  };
  imuObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      imuObject_descriptor_,
      imuObject::default_instance_,
      imuObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imuObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imuObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(imuObject));
  lighthouseMsg_descriptor_ = file->message_type(6);
  static const int lighthouseMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lighthouseMsg, SensorID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lighthouseMsg, BeamWord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lighthouseMsg, Timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lighthouseMsg, E_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lighthouseMsg, BaseStationID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lighthouseMsg, BaseStationChanel_),
  };
  lighthouseMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lighthouseMsg_descriptor_,
      lighthouseMsg::default_instance_,
      lighthouseMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lighthouseMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lighthouseMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lighthouseMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lighthouse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    configObject_descriptor_, &configObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trackedObjectConfig_descriptor_, &trackedObjectConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loggingObject_descriptor_, &loggingObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    commandObject_descriptor_, &commandObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    imuObject_descriptor_, &imuObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lighthouseMsg_descriptor_, &lighthouseMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lighthouse_2eproto() {
  delete configObject::default_instance_;
  delete configObject_reflection_;
  delete trackedObjectConfig::default_instance_;
  delete trackedObjectConfig_reflection_;
  delete loggingObject::default_instance_;
  delete loggingObject_reflection_;
  delete commandObject::default_instance_;
  delete commandObject_reflection_;
  delete imuObject::default_instance_;
  delete imuObject_reflection_;
  delete lighthouseMsg::default_instance_;
  delete lighthouseMsg_reflection_;
}

void protobuf_AddDesc_lighthouse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020lighthouse.proto\022\022mkr1000.lighthouse\"E"
    "\n\014configObject\022\n\n\002ip\030\001 \002(\r\022\024\n\014logging_po"
    "rt\030\002 \002(\005\022\023\n\013sensor_port\030\003 \002(\005\"7\n\023tracked"
    "ObjectConfig\022\n\n\002ip\030\001 \002(\r\022\024\n\014command_port"
    "\030\002 \002(\005\" \n\rloggingObject\022\017\n\007message\030\001 \002(\t"
    "\" \n\rcommandObject\022\017\n\007command\030\001 \002(\005\"I\n\tim"
    "uObject\022\n\n\002id\030\001 \002(\005\022\022\n\nquaternion\030\002 \003(\002\022"
    "\013\n\003acc\030\003 \003(\002\022\017\n\007gravity\030\004 \003(\002", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lighthouse.proto", &protobuf_RegisterTypes);
  configObject::default_instance_ = new configObject();
  trackedObjectConfig::default_instance_ = new trackedObjectConfig();
  loggingObject::default_instance_ = new loggingObject();
  commandObject::default_instance_ = new commandObject();
  imuObject::default_instance_ = new imuObject();
  lighthouseMsg::default_instance_ = new lighthouseMsg();
  configObject::default_instance_->InitAsDefaultInstance();
  trackedObjectConfig::default_instance_->InitAsDefaultInstance();
  loggingObject::default_instance_->InitAsDefaultInstance();
  commandObject::default_instance_->InitAsDefaultInstance();
  imuObject::default_instance_->InitAsDefaultInstance();
  lighthouseMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lighthouse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lighthouse_2eproto {
  StaticDescriptorInitializer_lighthouse_2eproto() {
    protobuf_AddDesc_lighthouse_2eproto();
  }
} static_descriptor_initializer_lighthouse_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int configObject::kIpFieldNumber;
const int configObject::kLoggingPortFieldNumber;
const int configObject::kSensorPortFieldNumber;
#endif  // !_MSC_VER

configObject::configObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mkr1000.lighthouse.configObject)
}

void configObject::InitAsDefaultInstance() {
}

configObject::configObject(const configObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mkr1000.lighthouse.configObject)
}

void configObject::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  logging_port_ = 0;
  sensor_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

configObject::~configObject() {
  // @@protoc_insertion_point(destructor:mkr1000.lighthouse.configObject)
  SharedDtor();
}

void configObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void configObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* configObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return configObject_descriptor_;
}

const configObject& configObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lighthouse_2eproto();
  return *default_instance_;
}

configObject* configObject::default_instance_ = NULL;

configObject* configObject::New() const {
  return new configObject;
}

void configObject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<configObject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, sensor_port_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool configObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mkr1000.lighthouse.configObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logging_port;
        break;
      }

      // required int32 logging_port = 2;
      case 2: {
        if (tag == 16) {
         parse_logging_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logging_port_)));
          set_has_logging_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sensor_port;
        break;
      }

      // required int32 sensor_port = 3;
      case 3: {
        if (tag == 24) {
         parse_sensor_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_port_)));
          set_has_sensor_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mkr1000.lighthouse.configObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mkr1000.lighthouse.configObject)
  return false;
#undef DO_
}

void configObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mkr1000.lighthouse.configObject)
  // required uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // required int32 logging_port = 2;
  if (has_logging_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logging_port(), output);
  }

  // required int32 sensor_port = 3;
  if (has_sensor_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sensor_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mkr1000.lighthouse.configObject)
}

::google::protobuf::uint8* configObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mkr1000.lighthouse.configObject)
  // required uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // required int32 logging_port = 2;
  if (has_logging_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logging_port(), target);
  }

  // required int32 sensor_port = 3;
  if (has_sensor_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sensor_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mkr1000.lighthouse.configObject)
  return target;
}

int configObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required int32 logging_port = 2;
    if (has_logging_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logging_port());
    }

    // required int32 sensor_port = 3;
    if (has_sensor_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sensor_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void configObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const configObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const configObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void configObject::MergeFrom(const configObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_logging_port()) {
      set_logging_port(from.logging_port());
    }
    if (from.has_sensor_port()) {
      set_sensor_port(from.sensor_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void configObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configObject::CopyFrom(const configObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void configObject::Swap(configObject* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(logging_port_, other->logging_port_);
    std::swap(sensor_port_, other->sensor_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata configObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = configObject_descriptor_;
  metadata.reflection = configObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trackedObjectConfig::kIpFieldNumber;
const int trackedObjectConfig::kCommandPortFieldNumber;
#endif  // !_MSC_VER

trackedObjectConfig::trackedObjectConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mkr1000.lighthouse.trackedObjectConfig)
}

void trackedObjectConfig::InitAsDefaultInstance() {
}

trackedObjectConfig::trackedObjectConfig(const trackedObjectConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mkr1000.lighthouse.trackedObjectConfig)
}

void trackedObjectConfig::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  command_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trackedObjectConfig::~trackedObjectConfig() {
  // @@protoc_insertion_point(destructor:mkr1000.lighthouse.trackedObjectConfig)
  SharedDtor();
}

void trackedObjectConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void trackedObjectConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trackedObjectConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trackedObjectConfig_descriptor_;
}

const trackedObjectConfig& trackedObjectConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lighthouse_2eproto();
  return *default_instance_;
}

trackedObjectConfig* trackedObjectConfig::default_instance_ = NULL;

trackedObjectConfig* trackedObjectConfig::New() const {
  return new trackedObjectConfig;
}

void trackedObjectConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<trackedObjectConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, command_port_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trackedObjectConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mkr1000.lighthouse.trackedObjectConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command_port;
        break;
      }

      // required int32 command_port = 2;
      case 2: {
        if (tag == 16) {
         parse_command_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_port_)));
          set_has_command_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mkr1000.lighthouse.trackedObjectConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mkr1000.lighthouse.trackedObjectConfig)
  return false;
#undef DO_
}

void trackedObjectConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mkr1000.lighthouse.trackedObjectConfig)
  // required uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // required int32 command_port = 2;
  if (has_command_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mkr1000.lighthouse.trackedObjectConfig)
}

::google::protobuf::uint8* trackedObjectConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mkr1000.lighthouse.trackedObjectConfig)
  // required uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // required int32 command_port = 2;
  if (has_command_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->command_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mkr1000.lighthouse.trackedObjectConfig)
  return target;
}

int trackedObjectConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required int32 command_port = 2;
    if (has_command_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trackedObjectConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trackedObjectConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trackedObjectConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trackedObjectConfig::MergeFrom(const trackedObjectConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_command_port()) {
      set_command_port(from.command_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trackedObjectConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trackedObjectConfig::CopyFrom(const trackedObjectConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trackedObjectConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void trackedObjectConfig::Swap(trackedObjectConfig* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(command_port_, other->command_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trackedObjectConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trackedObjectConfig_descriptor_;
  metadata.reflection = trackedObjectConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int loggingObject::kMessageFieldNumber;
#endif  // !_MSC_VER

loggingObject::loggingObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mkr1000.lighthouse.loggingObject)
}

void loggingObject::InitAsDefaultInstance() {
}

loggingObject::loggingObject(const loggingObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mkr1000.lighthouse.loggingObject)
}

void loggingObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loggingObject::~loggingObject() {
  // @@protoc_insertion_point(destructor:mkr1000.lighthouse.loggingObject)
  SharedDtor();
}

void loggingObject::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void loggingObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loggingObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loggingObject_descriptor_;
}

const loggingObject& loggingObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lighthouse_2eproto();
  return *default_instance_;
}

loggingObject* loggingObject::default_instance_ = NULL;

loggingObject* loggingObject::New() const {
  return new loggingObject;
}

void loggingObject::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loggingObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mkr1000.lighthouse.loggingObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mkr1000.lighthouse.loggingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mkr1000.lighthouse.loggingObject)
  return false;
#undef DO_
}

void loggingObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mkr1000.lighthouse.loggingObject)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mkr1000.lighthouse.loggingObject)
}

::google::protobuf::uint8* loggingObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mkr1000.lighthouse.loggingObject)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mkr1000.lighthouse.loggingObject)
  return target;
}

int loggingObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loggingObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loggingObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loggingObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loggingObject::MergeFrom(const loggingObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loggingObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loggingObject::CopyFrom(const loggingObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loggingObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void loggingObject::Swap(loggingObject* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loggingObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loggingObject_descriptor_;
  metadata.reflection = loggingObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int commandObject::kCommandFieldNumber;
#endif  // !_MSC_VER

commandObject::commandObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mkr1000.lighthouse.commandObject)
}

void commandObject::InitAsDefaultInstance() {
}

commandObject::commandObject(const commandObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mkr1000.lighthouse.commandObject)
}

void commandObject::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

commandObject::~commandObject() {
  // @@protoc_insertion_point(destructor:mkr1000.lighthouse.commandObject)
  SharedDtor();
}

void commandObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void commandObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* commandObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return commandObject_descriptor_;
}

const commandObject& commandObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lighthouse_2eproto();
  return *default_instance_;
}

commandObject* commandObject::default_instance_ = NULL;

commandObject* commandObject::New() const {
  return new commandObject;
}

void commandObject::Clear() {
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool commandObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mkr1000.lighthouse.commandObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 command = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mkr1000.lighthouse.commandObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mkr1000.lighthouse.commandObject)
  return false;
#undef DO_
}

void commandObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mkr1000.lighthouse.commandObject)
  // required int32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mkr1000.lighthouse.commandObject)
}

::google::protobuf::uint8* commandObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mkr1000.lighthouse.commandObject)
  // required int32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mkr1000.lighthouse.commandObject)
  return target;
}

int commandObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void commandObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const commandObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const commandObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void commandObject::MergeFrom(const commandObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void commandObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void commandObject::CopyFrom(const commandObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool commandObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void commandObject::Swap(commandObject* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata commandObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = commandObject_descriptor_;
  metadata.reflection = commandObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int imuObject::kIdFieldNumber;
const int imuObject::kQuaternionFieldNumber;
const int imuObject::kAccFieldNumber;
const int imuObject::kGravityFieldNumber;
#endif  // !_MSC_VER

imuObject::imuObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mkr1000.lighthouse.imuObject)
}

void imuObject::InitAsDefaultInstance() {
}

imuObject::imuObject(const imuObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mkr1000.lighthouse.imuObject)
}

void imuObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

imuObject::~imuObject() {
  // @@protoc_insertion_point(destructor:mkr1000.lighthouse.imuObject)
  SharedDtor();
}

void imuObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void imuObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* imuObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return imuObject_descriptor_;
}

const imuObject& imuObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lighthouse_2eproto();
  return *default_instance_;
}

imuObject* imuObject::default_instance_ = NULL;

imuObject* imuObject::New() const {
  return new imuObject;
}

void imuObject::Clear() {
  id_ = 0;
  quaternion_.Clear();
  acc_.Clear();
  gravity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool imuObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mkr1000.lighthouse.imuObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_quaternion;
        break;
      }

      // repeated float quaternion = 2;
      case 2: {
        if (tag == 21) {
         parse_quaternion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_quaternion())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_quaternion())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_quaternion;
        if (input->ExpectTag(29)) goto parse_acc;
        break;
      }

      // repeated float acc = 3;
      case 3: {
        if (tag == 29) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_acc())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_acc())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_acc;
        if (input->ExpectTag(37)) goto parse_gravity;
        break;
      }

      // repeated float gravity = 4;
      case 4: {
        if (tag == 37) {
         parse_gravity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_gravity())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gravity())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_gravity;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mkr1000.lighthouse.imuObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mkr1000.lighthouse.imuObject)
  return false;
#undef DO_
}

void imuObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mkr1000.lighthouse.imuObject)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated float quaternion = 2;
  for (int i = 0; i < this->quaternion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->quaternion(i), output);
  }

  // repeated float acc = 3;
  for (int i = 0; i < this->acc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->acc(i), output);
  }

  // repeated float gravity = 4;
  for (int i = 0; i < this->gravity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->gravity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mkr1000.lighthouse.imuObject)
}

::google::protobuf::uint8* imuObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mkr1000.lighthouse.imuObject)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated float quaternion = 2;
  for (int i = 0; i < this->quaternion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->quaternion(i), target);
  }

  // repeated float acc = 3;
  for (int i = 0; i < this->acc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->acc(i), target);
  }

  // repeated float gravity = 4;
  for (int i = 0; i < this->gravity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->gravity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mkr1000.lighthouse.imuObject)
  return target;
}

int imuObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated float quaternion = 2;
  {
    int data_size = 0;
    data_size = 4 * this->quaternion_size();
    total_size += 1 * this->quaternion_size() + data_size;
  }

  // repeated float acc = 3;
  {
    int data_size = 0;
    data_size = 4 * this->acc_size();
    total_size += 1 * this->acc_size() + data_size;
  }

  // repeated float gravity = 4;
  {
    int data_size = 0;
    data_size = 4 * this->gravity_size();
    total_size += 1 * this->gravity_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void imuObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const imuObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const imuObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void imuObject::MergeFrom(const imuObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  quaternion_.MergeFrom(from.quaternion_);
  acc_.MergeFrom(from.acc_);
  gravity_.MergeFrom(from.gravity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void imuObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imuObject::CopyFrom(const imuObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imuObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void imuObject::Swap(imuObject* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    quaternion_.Swap(&other->quaternion_);
    acc_.Swap(&other->acc_);
    gravity_.Swap(&other->gravity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata imuObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = imuObject_descriptor_;
  metadata.reflection = imuObject_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lighthouse
}  // namespace mkr1000

// @@protoc_insertion_point(global_scope)
