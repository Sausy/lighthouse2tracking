// Generated by gencpp from file roboy_control_msgs/ShowEmotionRequest.msg
// DO NOT EDIT!


#ifndef ROBOY_CONTROL_MSGS_MESSAGE_SHOWEMOTIONREQUEST_H
#define ROBOY_CONTROL_MSGS_MESSAGE_SHOWEMOTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_control_msgs
{
template <class ContainerAllocator>
struct ShowEmotionRequest_
{
  typedef ShowEmotionRequest_<ContainerAllocator> Type;

  ShowEmotionRequest_()
    : emotion()  {
    }
  ShowEmotionRequest_(const ContainerAllocator& _alloc)
    : emotion(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emotion_type;
  _emotion_type emotion;





  typedef boost::shared_ptr< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ShowEmotionRequest_

typedef ::roboy_control_msgs::ShowEmotionRequest_<std::allocator<void> > ShowEmotionRequest;

typedef boost::shared_ptr< ::roboy_control_msgs::ShowEmotionRequest > ShowEmotionRequestPtr;
typedef boost::shared_ptr< ::roboy_control_msgs::ShowEmotionRequest const> ShowEmotionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator1> & lhs, const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.emotion == rhs.emotion;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator1> & lhs, const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "320a4a5f8df4421af3ae0d4c52f87ab8";
  }

  static const char* value(const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x320a4a5f8df4421aULL;
  static const uint64_t static_value2 = 0xf3ae0d4c52f87ab8ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_control_msgs/ShowEmotionRequest";
  }

  static const char* value(const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string emotion\n"
;
  }

  static const char* value(const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emotion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShowEmotionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_control_msgs::ShowEmotionRequest_<ContainerAllocator>& v)
  {
    s << indent << "emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emotion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_CONTROL_MSGS_MESSAGE_SHOWEMOTIONREQUEST_H
