// Generated by gencpp from file roboy_middleware_msgs/DarkRoomSensorV2.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_DARKROOMSENSORV2_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_DARKROOMSENSORV2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct DarkRoomSensorV2_
{
  typedef DarkRoomSensorV2_<ContainerAllocator> Type;

  DarkRoomSensorV2_()
    : object_id()
    , base(0)
    , SensorID(0)
    , elevation(0.0)
    , azimuth(0.0)  {
    }
  DarkRoomSensorV2_(const ContainerAllocator& _alloc)
    : object_id(_alloc)
    , base(0)
    , SensorID(0)
    , elevation(0.0)
    , azimuth(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_id_type;
  _object_id_type object_id;

   typedef int8_t _base_type;
  _base_type base;

   typedef int8_t _SensorID_type;
  _SensorID_type SensorID;

   typedef double _elevation_type;
  _elevation_type elevation;

   typedef double _azimuth_type;
  _azimuth_type azimuth;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> const> ConstPtr;

}; // struct DarkRoomSensorV2_

typedef ::roboy_middleware_msgs::DarkRoomSensorV2_<std::allocator<void> > DarkRoomSensorV2;

typedef boost::shared_ptr< ::roboy_middleware_msgs::DarkRoomSensorV2 > DarkRoomSensorV2Ptr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::DarkRoomSensorV2 const> DarkRoomSensorV2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator2> & rhs)
{
  return lhs.object_id == rhs.object_id &&
    lhs.base == rhs.base &&
    lhs.SensorID == rhs.SensorID &&
    lhs.elevation == rhs.elevation &&
    lhs.azimuth == rhs.azimuth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33742585e0d9d4936d60498b07ad60de";
  }

  static const char* value(const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33742585e0d9d493ULL;
  static const uint64_t static_value2 = 0x6d60498b07ad60deULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/DarkRoomSensorV2";
  }

  static const char* value(const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string object_id\n"
"int8 base\n"
"int8 SensorID\n"
"float64 elevation\n"
"float64 azimuth\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.base);
      stream.next(m.SensorID);
      stream.next(m.elevation);
      stream.next(m.azimuth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DarkRoomSensorV2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::DarkRoomSensorV2_<ContainerAllocator>& v)
  {
    s << indent << "object_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_id);
    s << indent << "base: ";
    Printer<int8_t>::stream(s, indent + "  ", v.base);
    s << indent << "SensorID: ";
    Printer<int8_t>::stream(s, indent + "  ", v.SensorID);
    s << indent << "elevation: ";
    Printer<double>::stream(s, indent + "  ", v.elevation);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_DARKROOMSENSORV2_H
