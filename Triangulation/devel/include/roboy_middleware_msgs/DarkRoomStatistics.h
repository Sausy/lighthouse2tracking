// Generated by gencpp from file roboy_middleware_msgs/DarkRoomStatistics.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_DARKROOMSTATISTICS_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_DARKROOMSTATISTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct DarkRoomStatistics_
{
  typedef DarkRoomStatistics_<ContainerAllocator> Type;

  DarkRoomStatistics_()
    : object_name()
    , lighthouse(0)
    , update_frequency_horizontal()
    , update_frequency_vertical()  {
    }
  DarkRoomStatistics_(const ContainerAllocator& _alloc)
    : object_name(_alloc)
    , lighthouse(0)
    , update_frequency_horizontal(_alloc)
    , update_frequency_vertical(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;

   typedef int32_t _lighthouse_type;
  _lighthouse_type lighthouse;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _update_frequency_horizontal_type;
  _update_frequency_horizontal_type update_frequency_horizontal;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _update_frequency_vertical_type;
  _update_frequency_vertical_type update_frequency_vertical;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> const> ConstPtr;

}; // struct DarkRoomStatistics_

typedef ::roboy_middleware_msgs::DarkRoomStatistics_<std::allocator<void> > DarkRoomStatistics;

typedef boost::shared_ptr< ::roboy_middleware_msgs::DarkRoomStatistics > DarkRoomStatisticsPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::DarkRoomStatistics const> DarkRoomStatisticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator2> & rhs)
{
  return lhs.object_name == rhs.object_name &&
    lhs.lighthouse == rhs.lighthouse &&
    lhs.update_frequency_horizontal == rhs.update_frequency_horizontal &&
    lhs.update_frequency_vertical == rhs.update_frequency_vertical;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e96c4c9ae71be87963c0b1fcc870765";
  }

  static const char* value(const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e96c4c9ae71be87ULL;
  static const uint64_t static_value2 = 0x963c0b1fcc870765ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/DarkRoomStatistics";
  }

  static const char* value(const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string object_name\n"
"int32 lighthouse\n"
"float32[] update_frequency_horizontal\n"
"float32[] update_frequency_vertical\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
      stream.next(m.lighthouse);
      stream.next(m.update_frequency_horizontal);
      stream.next(m.update_frequency_vertical);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DarkRoomStatistics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::DarkRoomStatistics_<ContainerAllocator>& v)
  {
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "lighthouse: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lighthouse);
    s << indent << "update_frequency_horizontal[]" << std::endl;
    for (size_t i = 0; i < v.update_frequency_horizontal.size(); ++i)
    {
      s << indent << "  update_frequency_horizontal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.update_frequency_horizontal[i]);
    }
    s << indent << "update_frequency_vertical[]" << std::endl;
    for (size_t i = 0; i < v.update_frequency_vertical.size(); ++i)
    {
      s << indent << "  update_frequency_vertical[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.update_frequency_vertical[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_DARKROOMSTATISTICS_H
