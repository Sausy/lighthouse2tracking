// Generated by gencpp from file roboy_middleware_msgs/EmergencyStopRequest.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_EMERGENCYSTOPREQUEST_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_EMERGENCYSTOPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct EmergencyStopRequest_
{
  typedef EmergencyStopRequest_<ContainerAllocator> Type;

  EmergencyStopRequest_()
    : all(false)
    , id_list()  {
    }
  EmergencyStopRequest_(const ContainerAllocator& _alloc)
    : all(false)
    , id_list(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _all_type;
  _all_type all;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _id_list_type;
  _id_list_type id_list;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EmergencyStopRequest_

typedef ::roboy_middleware_msgs::EmergencyStopRequest_<std::allocator<void> > EmergencyStopRequest;

typedef boost::shared_ptr< ::roboy_middleware_msgs::EmergencyStopRequest > EmergencyStopRequestPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::EmergencyStopRequest const> EmergencyStopRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator2> & rhs)
{
  return lhs.all == rhs.all &&
    lhs.id_list == rhs.id_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb76188ba30b943945368157cf534274";
  }

  static const char* value(const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb76188ba30b9439ULL;
  static const uint64_t static_value2 = 0x45368157cf534274ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/EmergencyStopRequest";
  }

  static const char* value(const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool all\n"
"int8[] id_list\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.all);
      stream.next(m.id_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EmergencyStopRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::EmergencyStopRequest_<ContainerAllocator>& v)
  {
    s << indent << "all: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.all);
    s << indent << "id_list[]" << std::endl;
    for (size_t i = 0; i < v.id_list.size(); ++i)
    {
      s << indent << "  id_list[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.id_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_EMERGENCYSTOPREQUEST_H
