// Generated by gencpp from file roboy_middleware_msgs/HandCommand.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_HANDCOMMAND_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_HANDCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct HandCommand_
{
  typedef HandCommand_<ContainerAllocator> Type;

  HandCommand_()
    : hand_id(0)
    , command(0)
    , lock_finger_ids()  {
    }
  HandCommand_(const ContainerAllocator& _alloc)
    : hand_id(0)
    , command(0)
    , lock_finger_ids(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _hand_id_type;
  _hand_id_type hand_id;

   typedef uint8_t _command_type;
  _command_type command;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _lock_finger_ids_type;
  _lock_finger_ids_type lock_finger_ids;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> const> ConstPtr;

}; // struct HandCommand_

typedef ::roboy_middleware_msgs::HandCommand_<std::allocator<void> > HandCommand;

typedef boost::shared_ptr< ::roboy_middleware_msgs::HandCommand > HandCommandPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::HandCommand const> HandCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator2> & rhs)
{
  return lhs.hand_id == rhs.hand_id &&
    lhs.command == rhs.command &&
    lhs.lock_finger_ids == rhs.lock_finger_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c60b9fe10716361cf8f123e26a189b3";
  }

  static const char* value(const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c60b9fe10716361ULL;
  static const uint64_t static_value2 = 0xcf8f123e26a189b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/HandCommand";
  }

  static const char* value(const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 hand_id\n"
"uint8 command\n"
"uint8[] lock_finger_ids\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hand_id);
      stream.next(m.command);
      stream.next(m.lock_finger_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::HandCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::HandCommand_<ContainerAllocator>& v)
  {
    s << indent << "hand_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_id);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "lock_finger_ids[]" << std::endl;
    for (size_t i = 0; i < v.lock_finger_ids.size(); ++i)
    {
      s << indent << "  lock_finger_ids[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.lock_finger_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_HANDCOMMAND_H
