// Generated by gencpp from file roboy_middleware_msgs/MotorConfig.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIG_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct MotorConfig_
{
  typedef MotorConfig_<ContainerAllocator> Type;

  MotorConfig_()
    : id(0)
    , motors()
    , control_mode()
    , output_pos_max()
    , output_neg_max()
    , sp_pos_max()
    , sp_neg_max()
    , kp()
    , ki()
    , kd()
    , forward_gain()
    , dead_band()
    , integral_pos_max()
    , integral_neg_max()
    , output_divider()
    , setpoint()  {
    }
  MotorConfig_(const ContainerAllocator& _alloc)
    : id(0)
    , motors(_alloc)
    , control_mode(_alloc)
    , output_pos_max(_alloc)
    , output_neg_max(_alloc)
    , sp_pos_max(_alloc)
    , sp_neg_max(_alloc)
    , kp(_alloc)
    , ki(_alloc)
    , kd(_alloc)
    , forward_gain(_alloc)
    , dead_band(_alloc)
    , integral_pos_max(_alloc)
    , integral_neg_max(_alloc)
    , output_divider(_alloc)
    , setpoint(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _motors_type;
  _motors_type motors;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _control_mode_type;
  _control_mode_type control_mode;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _output_pos_max_type;
  _output_pos_max_type output_pos_max;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _output_neg_max_type;
  _output_neg_max_type output_neg_max;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sp_pos_max_type;
  _sp_pos_max_type sp_pos_max;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sp_neg_max_type;
  _sp_neg_max_type sp_neg_max;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _kp_type;
  _kp_type kp;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _ki_type;
  _ki_type ki;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _kd_type;
  _kd_type kd;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _forward_gain_type;
  _forward_gain_type forward_gain;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _dead_band_type;
  _dead_band_type dead_band;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _integral_pos_max_type;
  _integral_pos_max_type integral_pos_max;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _integral_neg_max_type;
  _integral_neg_max_type integral_neg_max;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _output_divider_type;
  _output_divider_type output_divider;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _setpoint_type;
  _setpoint_type setpoint;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> const> ConstPtr;

}; // struct MotorConfig_

typedef ::roboy_middleware_msgs::MotorConfig_<std::allocator<void> > MotorConfig;

typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfig > MotorConfigPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfig const> MotorConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.motors == rhs.motors &&
    lhs.control_mode == rhs.control_mode &&
    lhs.output_pos_max == rhs.output_pos_max &&
    lhs.output_neg_max == rhs.output_neg_max &&
    lhs.sp_pos_max == rhs.sp_pos_max &&
    lhs.sp_neg_max == rhs.sp_neg_max &&
    lhs.kp == rhs.kp &&
    lhs.ki == rhs.ki &&
    lhs.kd == rhs.kd &&
    lhs.forward_gain == rhs.forward_gain &&
    lhs.dead_band == rhs.dead_band &&
    lhs.integral_pos_max == rhs.integral_pos_max &&
    lhs.integral_neg_max == rhs.integral_neg_max &&
    lhs.output_divider == rhs.output_divider &&
    lhs.setpoint == rhs.setpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c59b5188ed0d7529ac35ce108ce30bbc";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc59b5188ed0d7529ULL;
  static const uint64_t static_value2 = 0xac35ce108ce30bbcULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/MotorConfig";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"uint8[] motors\n"
"uint8[] control_mode\n"
"int32[] output_pos_max\n"
"int32[] output_neg_max\n"
"int32[] sp_pos_max\n"
"int32[] sp_neg_max\n"
"uint16[] kp\n"
"uint16[] ki\n"
"uint16[] kd\n"
"uint16[] forward_gain\n"
"uint16[] dead_band\n"
"int32[] integral_pos_max\n"
"int32[] integral_neg_max\n"
"int32[] output_divider\n"
"int32[] setpoint\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.motors);
      stream.next(m.control_mode);
      stream.next(m.output_pos_max);
      stream.next(m.output_neg_max);
      stream.next(m.sp_pos_max);
      stream.next(m.sp_neg_max);
      stream.next(m.kp);
      stream.next(m.ki);
      stream.next(m.kd);
      stream.next(m.forward_gain);
      stream.next(m.dead_band);
      stream.next(m.integral_pos_max);
      stream.next(m.integral_neg_max);
      stream.next(m.output_divider);
      stream.next(m.setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "motors[]" << std::endl;
    for (size_t i = 0; i < v.motors.size(); ++i)
    {
      s << indent << "  motors[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.motors[i]);
    }
    s << indent << "control_mode[]" << std::endl;
    for (size_t i = 0; i < v.control_mode.size(); ++i)
    {
      s << indent << "  control_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.control_mode[i]);
    }
    s << indent << "output_pos_max[]" << std::endl;
    for (size_t i = 0; i < v.output_pos_max.size(); ++i)
    {
      s << indent << "  output_pos_max[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.output_pos_max[i]);
    }
    s << indent << "output_neg_max[]" << std::endl;
    for (size_t i = 0; i < v.output_neg_max.size(); ++i)
    {
      s << indent << "  output_neg_max[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.output_neg_max[i]);
    }
    s << indent << "sp_pos_max[]" << std::endl;
    for (size_t i = 0; i < v.sp_pos_max.size(); ++i)
    {
      s << indent << "  sp_pos_max[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sp_pos_max[i]);
    }
    s << indent << "sp_neg_max[]" << std::endl;
    for (size_t i = 0; i < v.sp_neg_max.size(); ++i)
    {
      s << indent << "  sp_neg_max[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sp_neg_max[i]);
    }
    s << indent << "kp[]" << std::endl;
    for (size_t i = 0; i < v.kp.size(); ++i)
    {
      s << indent << "  kp[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.kp[i]);
    }
    s << indent << "ki[]" << std::endl;
    for (size_t i = 0; i < v.ki.size(); ++i)
    {
      s << indent << "  ki[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.ki[i]);
    }
    s << indent << "kd[]" << std::endl;
    for (size_t i = 0; i < v.kd.size(); ++i)
    {
      s << indent << "  kd[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.kd[i]);
    }
    s << indent << "forward_gain[]" << std::endl;
    for (size_t i = 0; i < v.forward_gain.size(); ++i)
    {
      s << indent << "  forward_gain[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.forward_gain[i]);
    }
    s << indent << "dead_band[]" << std::endl;
    for (size_t i = 0; i < v.dead_band.size(); ++i)
    {
      s << indent << "  dead_band[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.dead_band[i]);
    }
    s << indent << "integral_pos_max[]" << std::endl;
    for (size_t i = 0; i < v.integral_pos_max.size(); ++i)
    {
      s << indent << "  integral_pos_max[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.integral_pos_max[i]);
    }
    s << indent << "integral_neg_max[]" << std::endl;
    for (size_t i = 0; i < v.integral_neg_max.size(); ++i)
    {
      s << indent << "  integral_neg_max[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.integral_neg_max[i]);
    }
    s << indent << "output_divider[]" << std::endl;
    for (size_t i = 0; i < v.output_divider.size(); ++i)
    {
      s << indent << "  output_divider[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.output_divider[i]);
    }
    s << indent << "setpoint[]" << std::endl;
    for (size_t i = 0; i < v.setpoint.size(); ++i)
    {
      s << indent << "  setpoint[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.setpoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIG_H
