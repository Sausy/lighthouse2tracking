// Generated by gencpp from file roboy_simulation_msgs/COM.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_COM_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_COM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct COM_
{
  typedef COM_<ContainerAllocator> Type;

  COM_()
    : roboy_id(0)
    , position()
    , velocity()  {
    }
  COM_(const ContainerAllocator& _alloc)
    : roboy_id(0)
    , position(_alloc)
    , velocity(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _roboy_id_type;
  _roboy_id_type roboy_id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::COM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::COM_<ContainerAllocator> const> ConstPtr;

}; // struct COM_

typedef ::roboy_simulation_msgs::COM_<std::allocator<void> > COM;

typedef boost::shared_ptr< ::roboy_simulation_msgs::COM > COMPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::COM const> COMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::COM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::COM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::COM_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::COM_<ContainerAllocator2> & rhs)
{
  return lhs.roboy_id == rhs.roboy_id &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::COM_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::COM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::COM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::COM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::COM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::COM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::COM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::COM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::COM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c72538e6ca61afbf4602096e5a19746b";
  }

  static const char* value(const ::roboy_simulation_msgs::COM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc72538e6ca61afbfULL;
  static const uint64_t static_value2 = 0x4602096e5a19746bULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::COM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/COM";
  }

  static const char* value(const ::roboy_simulation_msgs::COM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::COM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 roboy_id\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Point velocity\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::COM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::COM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roboy_id);
      stream.next(m.position);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct COM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::COM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::COM_<ContainerAllocator>& v)
  {
    s << indent << "roboy_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roboy_id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_COM_H
