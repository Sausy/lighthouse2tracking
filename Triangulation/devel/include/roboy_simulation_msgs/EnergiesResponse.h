// Generated by gencpp from file roboy_simulation_msgs/EnergiesResponse.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_ENERGIESRESPONSE_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_ENERGIESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct EnergiesResponse_
{
  typedef EnergiesResponse_<ContainerAllocator> Type;

  EnergiesResponse_()
    : E_speed(0.0)
    , E_headvel(0.0)
    , E_headori(0.0)
    , E_slide(0.0)
    , E_effort(0.0)  {
    }
  EnergiesResponse_(const ContainerAllocator& _alloc)
    : E_speed(0.0)
    , E_headvel(0.0)
    , E_headori(0.0)
    , E_slide(0.0)
    , E_effort(0.0)  {
  (void)_alloc;
    }



   typedef double _E_speed_type;
  _E_speed_type E_speed;

   typedef double _E_headvel_type;
  _E_headvel_type E_headvel;

   typedef double _E_headori_type;
  _E_headori_type E_headori;

   typedef double _E_slide_type;
  _E_slide_type E_slide;

   typedef double _E_effort_type;
  _E_effort_type E_effort;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EnergiesResponse_

typedef ::roboy_simulation_msgs::EnergiesResponse_<std::allocator<void> > EnergiesResponse;

typedef boost::shared_ptr< ::roboy_simulation_msgs::EnergiesResponse > EnergiesResponsePtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::EnergiesResponse const> EnergiesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.E_speed == rhs.E_speed &&
    lhs.E_headvel == rhs.E_headvel &&
    lhs.E_headori == rhs.E_headori &&
    lhs.E_slide == rhs.E_slide &&
    lhs.E_effort == rhs.E_effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a6c57e829cf6beb9c3918f4ad1ffcad";
  }

  static const char* value(const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a6c57e829cf6bebULL;
  static const uint64_t static_value2 = 0x9c3918f4ad1ffcadULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/EnergiesResponse";
  }

  static const char* value(const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 E_speed\n"
"float64 E_headvel\n"
"float64 E_headori\n"
"float64 E_slide\n"
"float64 E_effort\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.E_speed);
      stream.next(m.E_headvel);
      stream.next(m.E_headori);
      stream.next(m.E_slide);
      stream.next(m.E_effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EnergiesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::EnergiesResponse_<ContainerAllocator>& v)
  {
    s << indent << "E_speed: ";
    Printer<double>::stream(s, indent + "  ", v.E_speed);
    s << indent << "E_headvel: ";
    Printer<double>::stream(s, indent + "  ", v.E_headvel);
    s << indent << "E_headori: ";
    Printer<double>::stream(s, indent + "  ", v.E_headori);
    s << indent << "E_slide: ";
    Printer<double>::stream(s, indent + "  ", v.E_slide);
    s << indent << "E_effort: ";
    Printer<double>::stream(s, indent + "  ", v.E_effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_ENERGIESRESPONSE_H
