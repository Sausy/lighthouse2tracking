// Generated by gencpp from file roboy_simulation_msgs/ForceTorque.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_FORCETORQUE_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_FORCETORQUE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct ForceTorque_
{
  typedef ForceTorque_<ContainerAllocator> Type;

  ForceTorque_()
    : roboy_id(0)
    , leg(0)
    , joint()
    , force()
    , torque()  {
    }
  ForceTorque_(const ContainerAllocator& _alloc)
    : roboy_id(0)
    , leg(0)
    , joint(_alloc)
    , force(_alloc)
    , torque(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _roboy_id_type;
  _roboy_id_type roboy_id;

   typedef int32_t _leg_type;
  _leg_type leg;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_type;
  _joint_type joint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _force_type;
  _force_type force;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> const> ConstPtr;

}; // struct ForceTorque_

typedef ::roboy_simulation_msgs::ForceTorque_<std::allocator<void> > ForceTorque;

typedef boost::shared_ptr< ::roboy_simulation_msgs::ForceTorque > ForceTorquePtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::ForceTorque const> ForceTorqueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator2> & rhs)
{
  return lhs.roboy_id == rhs.roboy_id &&
    lhs.leg == rhs.leg &&
    lhs.joint == rhs.joint &&
    lhs.force == rhs.force &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b319cd6b955ae951e9c17fbe4b6dde5b";
  }

  static const char* value(const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb319cd6b955ae951ULL;
  static const uint64_t static_value2 = 0xe9c17fbe4b6dde5bULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/ForceTorque";
  }

  static const char* value(const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 roboy_id\n"
"int32 leg\n"
"string joint\n"
"geometry_msgs/Point force\n"
"geometry_msgs/Point torque\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roboy_id);
      stream.next(m.leg);
      stream.next(m.joint);
      stream.next(m.force);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ForceTorque_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::ForceTorque_<ContainerAllocator>& v)
  {
    s << indent << "roboy_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roboy_id);
    s << indent << "leg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.leg);
    s << indent << "joint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint);
    s << indent << "force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.force);
    s << indent << "torque: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_FORCETORQUE_H
