// Generated by gencpp from file roboy_simulation_msgs/GymResetResponse.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_GYMRESETRESPONSE_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_GYMRESETRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct GymResetResponse_
{
  typedef GymResetResponse_<ContainerAllocator> Type;

  GymResetResponse_()
    : q()
    , qdot()  {
    }
  GymResetResponse_(const ContainerAllocator& _alloc)
    : q(_alloc)
    , qdot(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_type;
  _q_type q;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qdot_type;
  _qdot_type qdot;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GymResetResponse_

typedef ::roboy_simulation_msgs::GymResetResponse_<std::allocator<void> > GymResetResponse;

typedef boost::shared_ptr< ::roboy_simulation_msgs::GymResetResponse > GymResetResponsePtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::GymResetResponse const> GymResetResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator2> & rhs)
{
  return lhs.q == rhs.q &&
    lhs.qdot == rhs.qdot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45a5c905c9481a71e7b5dee770e487ce";
  }

  static const char* value(const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45a5c905c9481a71ULL;
  static const uint64_t static_value2 = 0xe7b5dee770e487ceULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/GymResetResponse";
  }

  static const char* value(const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] q\n"
"float64[] qdot\n"
"\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q);
      stream.next(m.qdot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GymResetResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::GymResetResponse_<ContainerAllocator>& v)
  {
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "qdot[]" << std::endl;
    for (size_t i = 0; i < v.qdot.size(); ++i)
    {
      s << indent << "  qdot[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qdot[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_GYMRESETRESPONSE_H
