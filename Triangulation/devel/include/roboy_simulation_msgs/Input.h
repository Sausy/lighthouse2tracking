// Generated by gencpp from file roboy_simulation_msgs/Input.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_INPUT_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_INPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct Input_
{
  typedef Input_<ContainerAllocator> Type;

  Input_()
    : roboy_id(0)
    , name()
    , input_voltage(0.0)  {
    }
  Input_(const ContainerAllocator& _alloc)
    : roboy_id(0)
    , name(_alloc)
    , input_voltage(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _roboy_id_type;
  _roboy_id_type roboy_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef float _input_voltage_type;
  _input_voltage_type input_voltage;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::Input_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::Input_<ContainerAllocator> const> ConstPtr;

}; // struct Input_

typedef ::roboy_simulation_msgs::Input_<std::allocator<void> > Input;

typedef boost::shared_ptr< ::roboy_simulation_msgs::Input > InputPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::Input const> InputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::Input_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::Input_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::Input_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Input_<ContainerAllocator2> & rhs)
{
  return lhs.roboy_id == rhs.roboy_id &&
    lhs.name == rhs.name &&
    lhs.input_voltage == rhs.input_voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::Input_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Input_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Input_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Input_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8cd56c18e35268c1e5cd4abb835e711";
  }

  static const char* value(const ::roboy_simulation_msgs::Input_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8cd56c18e35268cULL;
  static const uint64_t static_value2 = 0x1e5cd4abb835e711ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/Input";
  }

  static const char* value(const ::roboy_simulation_msgs::Input_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 roboy_id\n"
"string name\n"
"float32 input_voltage\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::Input_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::Input_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roboy_id);
      stream.next(m.name);
      stream.next(m.input_voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Input_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::Input_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::Input_<ContainerAllocator>& v)
  {
    s << indent << "roboy_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roboy_id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "input_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.input_voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_INPUT_H
