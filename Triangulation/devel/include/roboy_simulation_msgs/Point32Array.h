// Generated by gencpp from file roboy_simulation_msgs/Point32Array.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_POINT32ARRAY_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_POINT32ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct Point32Array_
{
  typedef Point32Array_<ContainerAllocator> Type;

  Point32Array_()
    : person(0)
    , id()
    , point()  {
    }
  Point32Array_(const ContainerAllocator& _alloc)
    : person(0)
    , id(_alloc)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _person_type;
  _person_type person;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_type;
  _id_type id;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> const> ConstPtr;

}; // struct Point32Array_

typedef ::roboy_simulation_msgs::Point32Array_<std::allocator<void> > Point32Array;

typedef boost::shared_ptr< ::roboy_simulation_msgs::Point32Array > Point32ArrayPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::Point32Array const> Point32ArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator2> & rhs)
{
  return lhs.person == rhs.person &&
    lhs.id == rhs.id &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a7498411af35f4561c6514bb8224f4d";
  }

  static const char* value(const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a7498411af35f45ULL;
  static const uint64_t static_value2 = 0x61c6514bb8224f4dULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/Point32Array";
  }

  static const char* value(const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 person\n"
"int32[] id\n"
"geometry_msgs/Point32[] point\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.person);
      stream.next(m.id);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Point32Array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::Point32Array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::Point32Array_<ContainerAllocator>& v)
  {
    s << indent << "person: ";
    Printer<int32_t>::stream(s, indent + "  ", v.person);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "point[]" << std::endl;
    for (size_t i = 0; i < v.point.size(); ++i)
    {
      s << indent << "  point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.point[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_POINT32ARRAY_H
