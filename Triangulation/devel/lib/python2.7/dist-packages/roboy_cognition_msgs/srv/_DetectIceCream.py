# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_cognition_msgs/DetectIceCreamRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DetectIceCreamRequest(genpy.Message):
  _md5sum = "84207694a269085fcb70e35db8eaaa5c"
  _type = "roboy_cognition_msgs/DetectIceCreamRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string flavor
"""
  __slots__ = ['flavor']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flavor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectIceCreamRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.flavor is None:
        self.flavor = ''
    else:
      self.flavor = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.flavor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flavor = str[start:end].decode('utf-8')
      else:
        self.flavor = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.flavor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flavor = str[start:end].decode('utf-8')
      else:
        self.flavor = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_cognition_msgs/DetectIceCreamResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class DetectIceCreamResponse(genpy.Message):
  _md5sum = "16fd345363711f9e984e0964e8b97477"
  _type = "roboy_cognition_msgs/DetectIceCreamResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point start_scooping
geometry_msgs/Point end_scooping
string error_message

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['start_scooping','end_scooping','error_message']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_scooping,end_scooping,error_message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectIceCreamResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_scooping is None:
        self.start_scooping = geometry_msgs.msg.Point()
      if self.end_scooping is None:
        self.end_scooping = geometry_msgs.msg.Point()
      if self.error_message is None:
        self.error_message = ''
    else:
      self.start_scooping = geometry_msgs.msg.Point()
      self.end_scooping = geometry_msgs.msg.Point()
      self.error_message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.start_scooping.x, _x.start_scooping.y, _x.start_scooping.z, _x.end_scooping.x, _x.end_scooping.y, _x.end_scooping.z))
      _x = self.error_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_scooping is None:
        self.start_scooping = geometry_msgs.msg.Point()
      if self.end_scooping is None:
        self.end_scooping = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.start_scooping.x, _x.start_scooping.y, _x.start_scooping.z, _x.end_scooping.x, _x.end_scooping.y, _x.end_scooping.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_message = str[start:end].decode('utf-8')
      else:
        self.error_message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.start_scooping.x, _x.start_scooping.y, _x.start_scooping.z, _x.end_scooping.x, _x.end_scooping.y, _x.end_scooping.z))
      _x = self.error_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_scooping is None:
        self.start_scooping = geometry_msgs.msg.Point()
      if self.end_scooping is None:
        self.end_scooping = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.start_scooping.x, _x.start_scooping.y, _x.start_scooping.z, _x.end_scooping.x, _x.end_scooping.y, _x.end_scooping.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_message = str[start:end].decode('utf-8')
      else:
        self.error_message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
class DetectIceCream(object):
  _type          = 'roboy_cognition_msgs/DetectIceCream'
  _md5sum = '37d1e42fc203c1ff8077a402e7927892'
  _request_class  = DetectIceCreamRequest
  _response_class = DetectIceCreamResponse
