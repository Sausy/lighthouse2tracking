# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_cognition_msgs/QualityOfToneRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class QualityOfToneRequest(genpy.Message):
  _md5sum = "81bbf7d9a2a6be58466cbdf6da81f0a4"
  _type = "roboy_cognition_msgs/QualityOfToneRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string tone
float32 time_in_milliseconds
bool major_only
"""
  __slots__ = ['tone','time_in_milliseconds','major_only']
  _slot_types = ['string','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tone,time_in_milliseconds,major_only

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QualityOfToneRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tone is None:
        self.tone = ''
      if self.time_in_milliseconds is None:
        self.time_in_milliseconds = 0.
      if self.major_only is None:
        self.major_only = False
    else:
      self.tone = ''
      self.time_in_milliseconds = 0.
      self.major_only = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.tone
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fB().pack(_x.time_in_milliseconds, _x.major_only))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tone = str[start:end].decode('utf-8')
      else:
        self.tone = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.time_in_milliseconds, _x.major_only,) = _get_struct_fB().unpack(str[start:end])
      self.major_only = bool(self.major_only)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.tone
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fB().pack(_x.time_in_milliseconds, _x.major_only))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tone = str[start:end].decode('utf-8')
      else:
        self.tone = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.time_in_milliseconds, _x.major_only,) = _get_struct_fB().unpack(str[start:end])
      self.major_only = bool(self.major_only)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_cognition_msgs/QualityOfToneResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class QualityOfToneResponse(genpy.Message):
  _md5sum = "aa7b415eedd90d5e1e617045b66b8d00"
  _type = "roboy_cognition_msgs/QualityOfToneResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 quality
float32 purity
float32 direction_z
float32 direction_y
bool hit_pin

"""
  __slots__ = ['quality','purity','direction_z','direction_y','hit_pin']
  _slot_types = ['float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       quality,purity,direction_z,direction_y,hit_pin

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QualityOfToneResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.quality is None:
        self.quality = 0.
      if self.purity is None:
        self.purity = 0.
      if self.direction_z is None:
        self.direction_z = 0.
      if self.direction_y is None:
        self.direction_y = 0.
      if self.hit_pin is None:
        self.hit_pin = False
    else:
      self.quality = 0.
      self.purity = 0.
      self.direction_z = 0.
      self.direction_y = 0.
      self.hit_pin = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4fB().pack(_x.quality, _x.purity, _x.direction_z, _x.direction_y, _x.hit_pin))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.quality, _x.purity, _x.direction_z, _x.direction_y, _x.hit_pin,) = _get_struct_4fB().unpack(str[start:end])
      self.hit_pin = bool(self.hit_pin)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4fB().pack(_x.quality, _x.purity, _x.direction_z, _x.direction_y, _x.hit_pin))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.quality, _x.purity, _x.direction_z, _x.direction_y, _x.hit_pin,) = _get_struct_4fB().unpack(str[start:end])
      self.hit_pin = bool(self.hit_pin)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fB = None
def _get_struct_4fB():
    global _struct_4fB
    if _struct_4fB is None:
        _struct_4fB = struct.Struct("<4fB")
    return _struct_4fB
class QualityOfTone(object):
  _type          = 'roboy_cognition_msgs/QualityOfTone'
  _md5sum = 'eeaf952b12443d5b5a1e7a092753228a'
  _request_class  = QualityOfToneRequest
  _response_class = QualityOfToneResponse
