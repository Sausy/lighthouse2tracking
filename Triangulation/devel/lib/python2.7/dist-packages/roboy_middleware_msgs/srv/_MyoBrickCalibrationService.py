# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/MyoBrickCalibrationServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MyoBrickCalibrationServiceRequest(genpy.Message):
  _md5sum = "01b109725ce2a4cc2c1a8e505f50fa07"
  _type = "roboy_middleware_msgs/MyoBrickCalibrationServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 fpga
int8 motor
int8 degree
int32 timeout
uint32 number_of_data_points
float32 min_degree
float32 max_degree
"""
  __slots__ = ['fpga','motor','degree','timeout','number_of_data_points','min_degree','max_degree']
  _slot_types = ['int8','int8','int8','int32','uint32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fpga,motor,degree,timeout,number_of_data_points,min_degree,max_degree

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MyoBrickCalibrationServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fpga is None:
        self.fpga = 0
      if self.motor is None:
        self.motor = 0
      if self.degree is None:
        self.degree = 0
      if self.timeout is None:
        self.timeout = 0
      if self.number_of_data_points is None:
        self.number_of_data_points = 0
      if self.min_degree is None:
        self.min_degree = 0.
      if self.max_degree is None:
        self.max_degree = 0.
    else:
      self.fpga = 0
      self.motor = 0
      self.degree = 0
      self.timeout = 0
      self.number_of_data_points = 0
      self.min_degree = 0.
      self.max_degree = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3biI2f().pack(_x.fpga, _x.motor, _x.degree, _x.timeout, _x.number_of_data_points, _x.min_degree, _x.max_degree))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.fpga, _x.motor, _x.degree, _x.timeout, _x.number_of_data_points, _x.min_degree, _x.max_degree,) = _get_struct_3biI2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3biI2f().pack(_x.fpga, _x.motor, _x.degree, _x.timeout, _x.number_of_data_points, _x.min_degree, _x.max_degree))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.fpga, _x.motor, _x.degree, _x.timeout, _x.number_of_data_points, _x.min_degree, _x.max_degree,) = _get_struct_3biI2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3biI2f = None
def _get_struct_3biI2f():
    global _struct_3biI2f
    if _struct_3biI2f is None:
        _struct_3biI2f = struct.Struct("<3biI2f")
    return _struct_3biI2f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/MyoBrickCalibrationServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MyoBrickCalibrationServiceResponse(genpy.Message):
  _md5sum = "c0ec05faaadb5e990760f8da40d23f61"
  _type = "roboy_middleware_msgs/MyoBrickCalibrationServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] estimated_spring_parameters
float64[] motor_angle
float64[] motor_encoder

"""
  __slots__ = ['estimated_spring_parameters','motor_angle','motor_encoder']
  _slot_types = ['float32[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       estimated_spring_parameters,motor_angle,motor_encoder

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MyoBrickCalibrationServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.estimated_spring_parameters is None:
        self.estimated_spring_parameters = []
      if self.motor_angle is None:
        self.motor_angle = []
      if self.motor_encoder is None:
        self.motor_encoder = []
    else:
      self.estimated_spring_parameters = []
      self.motor_angle = []
      self.motor_encoder = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.estimated_spring_parameters)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.estimated_spring_parameters))
      length = len(self.motor_angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.motor_angle))
      length = len(self.motor_encoder)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.motor_encoder))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.estimated_spring_parameters = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_angle = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_encoder = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.estimated_spring_parameters)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.estimated_spring_parameters.tostring())
      length = len(self.motor_angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motor_angle.tostring())
      length = len(self.motor_encoder)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motor_encoder.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.estimated_spring_parameters = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_angle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_encoder = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class MyoBrickCalibrationService(object):
  _type          = 'roboy_middleware_msgs/MyoBrickCalibrationService'
  _md5sum = 'e5ee8b92f36ed4d7af8af588c906a8b4'
  _request_class  = MyoBrickCalibrationServiceRequest
  _response_class = MyoBrickCalibrationServiceResponse
