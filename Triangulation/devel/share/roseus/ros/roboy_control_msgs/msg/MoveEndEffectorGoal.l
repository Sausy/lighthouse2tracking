;; Auto-generated. Do not edit!


(when (boundp 'roboy_control_msgs::MoveEndEffectorGoal)
  (if (not (find-package "ROBOY_CONTROL_MSGS"))
    (make-package "ROBOY_CONTROL_MSGS"))
  (shadow 'MoveEndEffectorGoal (find-package "ROBOY_CONTROL_MSGS")))
(unless (find-package "ROBOY_CONTROL_MSGS::MOVEENDEFFECTORGOAL")
  (make-package "ROBOY_CONTROL_MSGS::MOVEENDEFFECTORGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveEndEffectorGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass roboy_control_msgs::MoveEndEffectorGoal
  :super ros::object
  :slots (_endeffector _type _ik_type _pose _target_frame _timeout _tolerance ))

(defmethod roboy_control_msgs::MoveEndEffectorGoal
  (:init
   (&key
    ((:endeffector __endeffector) "")
    ((:type __type) 0)
    ((:ik_type __ik_type) 0)
    ((:pose __pose) (instance geometry_msgs::Pose :init))
    ((:target_frame __target_frame) "")
    ((:timeout __timeout) 0)
    ((:tolerance __tolerance) 0.0)
    )
   (send-super :init)
   (setq _endeffector (string __endeffector))
   (setq _type (round __type))
   (setq _ik_type (round __ik_type))
   (setq _pose __pose)
   (setq _target_frame (string __target_frame))
   (setq _timeout (round __timeout))
   (setq _tolerance (float __tolerance))
   self)
  (:endeffector
   (&optional __endeffector)
   (if __endeffector (setq _endeffector __endeffector)) _endeffector)
  (:type
   (&optional __type)
   (if __type (setq _type __type)) _type)
  (:ik_type
   (&optional __ik_type)
   (if __ik_type (setq _ik_type __ik_type)) _ik_type)
  (:pose
   (&rest __pose)
   (if (keywordp (car __pose))
       (send* _pose __pose)
     (progn
       (if __pose (setq _pose (car __pose)))
       _pose)))
  (:target_frame
   (&optional __target_frame)
   (if __target_frame (setq _target_frame __target_frame)) _target_frame)
  (:timeout
   (&optional __timeout)
   (if __timeout (setq _timeout __timeout)) _timeout)
  (:tolerance
   (&optional __tolerance)
   (if __tolerance (setq _tolerance __tolerance)) _tolerance)
  (:serialization-length
   ()
   (+
    ;; string _endeffector
    4 (length _endeffector)
    ;; int8 _type
    1
    ;; int8 _ik_type
    1
    ;; geometry_msgs/Pose _pose
    (send _pose :serialization-length)
    ;; string _target_frame
    4 (length _target_frame)
    ;; int32 _timeout
    4
    ;; float32 _tolerance
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _endeffector
       (write-long (length _endeffector) s) (princ _endeffector s)
     ;; int8 _type
       (write-byte _type s)
     ;; int8 _ik_type
       (write-byte _ik_type s)
     ;; geometry_msgs/Pose _pose
       (send _pose :serialize s)
     ;; string _target_frame
       (write-long (length _target_frame) s) (princ _target_frame s)
     ;; int32 _timeout
       (write-long _timeout s)
     ;; float32 _tolerance
       (sys::poke _tolerance (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _endeffector
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _endeffector (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; int8 _type
     (setq _type (sys::peek buf ptr- :char)) (incf ptr- 1)
     (if (> _type 127) (setq _type (- _type 256)))
   ;; int8 _ik_type
     (setq _ik_type (sys::peek buf ptr- :char)) (incf ptr- 1)
     (if (> _ik_type 127) (setq _ik_type (- _ik_type 256)))
   ;; geometry_msgs/Pose _pose
     (send _pose :deserialize buf ptr-) (incf ptr- (send _pose :serialization-length))
   ;; string _target_frame
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _target_frame (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; int32 _timeout
     (setq _timeout (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float32 _tolerance
     (setq _tolerance (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get roboy_control_msgs::MoveEndEffectorGoal :md5sum-) "f33fbd8d95986b67598d14cdfccd5fac")
(setf (get roboy_control_msgs::MoveEndEffectorGoal :datatype-) "roboy_control_msgs/MoveEndEffectorGoal")
(setf (get roboy_control_msgs::MoveEndEffectorGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
string endeffector
# 0: pose in world frame 1: pose relative to target_frame
int8 type
# 0: position and orientation 1: position only 2: orientation only
int8 ik_type
geometry_msgs/Pose pose
string target_frame
int32 timeout
float32 tolerance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :roboy_control_msgs/MoveEndEffectorGoal "f33fbd8d95986b67598d14cdfccd5fac")


