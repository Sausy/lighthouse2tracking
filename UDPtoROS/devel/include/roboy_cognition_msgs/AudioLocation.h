// Generated by gencpp from file roboy_cognition_msgs/AudioLocation.msg
// DO NOT EDIT!


#ifndef ROBOY_COGNITION_MSGS_MESSAGE_AUDIOLOCATION_H
#define ROBOY_COGNITION_MSGS_MESSAGE_AUDIOLOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_cognition_msgs
{
template <class ContainerAllocator>
struct AudioLocation_
{
  typedef AudioLocation_<ContainerAllocator> Type;

  AudioLocation_()
    : id(0)
    , type()
    , x()
    , y()
    , z()
    , energy()  {
    }
  AudioLocation_(const ContainerAllocator& _alloc)
    : id(0)
    , type(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , energy(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  _x_type x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_type;
  _y_type y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _z_type;
  _z_type z;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _energy_type;
  _energy_type energy;





  typedef boost::shared_ptr< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> const> ConstPtr;

}; // struct AudioLocation_

typedef ::roboy_cognition_msgs::AudioLocation_<std::allocator<void> > AudioLocation;

typedef boost::shared_ptr< ::roboy_cognition_msgs::AudioLocation > AudioLocationPtr;
typedef boost::shared_ptr< ::roboy_cognition_msgs::AudioLocation const> AudioLocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator1> & lhs, const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.energy == rhs.energy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator1> & lhs, const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_cognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70a55b74373e27b72a5b9fac2f616a1c";
  }

  static const char* value(const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70a55b74373e27b7ULL;
  static const uint64_t static_value2 = 0x2a5b9fac2f616a1cULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_cognition_msgs/AudioLocation";
  }

  static const char* value(const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"string type\n"
"float32[] x\n"
"float32[] y\n"
"float32[] z\n"
"float32[] energy\n"
;
  }

  static const char* value(const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.energy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AudioLocation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_cognition_msgs::AudioLocation_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z[i]);
    }
    s << indent << "energy[]" << std::endl;
    for (size_t i = 0; i < v.energy.size(); ++i)
    {
      s << indent << "  energy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.energy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_COGNITION_MSGS_MESSAGE_AUDIOLOCATION_H
