// Generated by gencpp from file roboy_cognition_msgs/OrderIceCreamFeedback.msg
// DO NOT EDIT!


#ifndef ROBOY_COGNITION_MSGS_MESSAGE_ORDERICECREAMFEEDBACK_H
#define ROBOY_COGNITION_MSGS_MESSAGE_ORDERICECREAMFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_cognition_msgs
{
template <class ContainerAllocator>
struct OrderIceCreamFeedback_
{
  typedef OrderIceCreamFeedback_<ContainerAllocator> Type;

  OrderIceCreamFeedback_()
    : finished_scoops()
    , status_message()  {
    }
  OrderIceCreamFeedback_(const ContainerAllocator& _alloc)
    : finished_scoops(_alloc)
    , status_message(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _finished_scoops_type;
  _finished_scoops_type finished_scoops;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  _status_message_type status_message;





  typedef boost::shared_ptr< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct OrderIceCreamFeedback_

typedef ::roboy_cognition_msgs::OrderIceCreamFeedback_<std::allocator<void> > OrderIceCreamFeedback;

typedef boost::shared_ptr< ::roboy_cognition_msgs::OrderIceCreamFeedback > OrderIceCreamFeedbackPtr;
typedef boost::shared_ptr< ::roboy_cognition_msgs::OrderIceCreamFeedback const> OrderIceCreamFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator1> & lhs, const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.finished_scoops == rhs.finished_scoops &&
    lhs.status_message == rhs.status_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator1> & lhs, const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_cognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84132ae12f784d01b8d8c41f0054500b";
  }

  static const char* value(const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84132ae12f784d01ULL;
  static const uint64_t static_value2 = 0xb8d8c41f0054500bULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_cognition_msgs/OrderIceCreamFeedback";
  }

  static const char* value(const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# for every finished scoop, feedback is supplied in form of another boolean that is appended to finished_scoops\n"
"# status messages can be \"more time\" \n"
"bool[] finished_scoops \n"
"string status_message\n"
"\n"
;
  }

  static const char* value(const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finished_scoops);
      stream.next(m.status_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OrderIceCreamFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_cognition_msgs::OrderIceCreamFeedback_<ContainerAllocator>& v)
  {
    s << indent << "finished_scoops[]" << std::endl;
    for (size_t i = 0; i < v.finished_scoops.size(); ++i)
    {
      s << indent << "  finished_scoops[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.finished_scoops[i]);
    }
    s << indent << "status_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_COGNITION_MSGS_MESSAGE_ORDERICECREAMFEEDBACK_H
