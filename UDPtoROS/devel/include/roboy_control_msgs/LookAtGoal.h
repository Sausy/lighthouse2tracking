// Generated by gencpp from file roboy_control_msgs/LookAtGoal.msg
// DO NOT EDIT!


#ifndef ROBOY_CONTROL_MSGS_MESSAGE_LOOKATGOAL_H
#define ROBOY_CONTROL_MSGS_MESSAGE_LOOKATGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace roboy_control_msgs
{
template <class ContainerAllocator>
struct LookAtGoal_
{
  typedef LookAtGoal_<ContainerAllocator> Type;

  LookAtGoal_()
    : endEffector()
    , yaw_joint_index(0)
    , pitch_joint_index(0)
    , type(0)
    , point()
    , root_frame()
    , target_frame()
    , sendToRealHardware(false)
    , timeout(0)
    , tolerance(0.0)  {
    }
  LookAtGoal_(const ContainerAllocator& _alloc)
    : endEffector(_alloc)
    , yaw_joint_index(0)
    , pitch_joint_index(0)
    , type(0)
    , point(_alloc)
    , root_frame(_alloc)
    , target_frame(_alloc)
    , sendToRealHardware(false)
    , timeout(0)
    , tolerance(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _endEffector_type;
  _endEffector_type endEffector;

   typedef int32_t _yaw_joint_index_type;
  _yaw_joint_index_type yaw_joint_index;

   typedef int32_t _pitch_joint_index_type;
  _pitch_joint_index_type pitch_joint_index;

   typedef int32_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _root_frame_type;
  _root_frame_type root_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_frame_type;
  _target_frame_type target_frame;

   typedef uint8_t _sendToRealHardware_type;
  _sendToRealHardware_type sendToRealHardware;

   typedef int32_t _timeout_type;
  _timeout_type timeout;

   typedef float _tolerance_type;
  _tolerance_type tolerance;





  typedef boost::shared_ptr< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LookAtGoal_

typedef ::roboy_control_msgs::LookAtGoal_<std::allocator<void> > LookAtGoal;

typedef boost::shared_ptr< ::roboy_control_msgs::LookAtGoal > LookAtGoalPtr;
typedef boost::shared_ptr< ::roboy_control_msgs::LookAtGoal const> LookAtGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator1> & lhs, const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator2> & rhs)
{
  return lhs.endEffector == rhs.endEffector &&
    lhs.yaw_joint_index == rhs.yaw_joint_index &&
    lhs.pitch_joint_index == rhs.pitch_joint_index &&
    lhs.type == rhs.type &&
    lhs.point == rhs.point &&
    lhs.root_frame == rhs.root_frame &&
    lhs.target_frame == rhs.target_frame &&
    lhs.sendToRealHardware == rhs.sendToRealHardware &&
    lhs.timeout == rhs.timeout &&
    lhs.tolerance == rhs.tolerance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator1> & lhs, const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f48da693a0e6a39c4c3e11abc6ed7e6";
  }

  static const char* value(const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f48da693a0e6a39ULL;
  static const uint64_t static_value2 = 0xc4c3e11abc6ed7e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_control_msgs/LookAtGoal";
  }

  static const char* value(const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"string endEffector\n"
"int32 yaw_joint_index\n"
"int32 pitch_joint_index\n"
"# 0: point in world frame\n"
"# 1: target frame relative to root_frame\n"
"# 2: target frame relative to root_frame single shot\n"
"int32 type\n"
"geometry_msgs/Vector3 point\n"
"string root_frame\n"
"string target_frame\n"
"bool sendToRealHardware\n"
"int32 timeout\n"
"float32 tolerance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.endEffector);
      stream.next(m.yaw_joint_index);
      stream.next(m.pitch_joint_index);
      stream.next(m.type);
      stream.next(m.point);
      stream.next(m.root_frame);
      stream.next(m.target_frame);
      stream.next(m.sendToRealHardware);
      stream.next(m.timeout);
      stream.next(m.tolerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LookAtGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_control_msgs::LookAtGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_control_msgs::LookAtGoal_<ContainerAllocator>& v)
  {
    s << indent << "endEffector: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.endEffector);
    s << indent << "yaw_joint_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yaw_joint_index);
    s << indent << "pitch_joint_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pitch_joint_index);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "root_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.root_frame);
    s << indent << "target_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_frame);
    s << indent << "sendToRealHardware: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sendToRealHardware);
    s << indent << "timeout: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeout);
    s << indent << "tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_CONTROL_MSGS_MESSAGE_LOOKATGOAL_H
