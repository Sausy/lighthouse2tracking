// Generated by gencpp from file roboy_control_msgs/StartRecordTrajectory.msg
// DO NOT EDIT!


#ifndef ROBOY_CONTROL_MSGS_MESSAGE_STARTRECORDTRAJECTORY_H
#define ROBOY_CONTROL_MSGS_MESSAGE_STARTRECORDTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_control_msgs
{
template <class ContainerAllocator>
struct StartRecordTrajectory_
{
  typedef StartRecordTrajectory_<ContainerAllocator> Type;

  StartRecordTrajectory_()
    : name()
    , body_parts()
    , id_list()  {
    }
  StartRecordTrajectory_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , body_parts(_alloc)
    , id_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _body_parts_type;
  _body_parts_type body_parts;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _id_list_type;
  _id_list_type id_list;





  typedef boost::shared_ptr< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct StartRecordTrajectory_

typedef ::roboy_control_msgs::StartRecordTrajectory_<std::allocator<void> > StartRecordTrajectory;

typedef boost::shared_ptr< ::roboy_control_msgs::StartRecordTrajectory > StartRecordTrajectoryPtr;
typedef boost::shared_ptr< ::roboy_control_msgs::StartRecordTrajectory const> StartRecordTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator1> & lhs, const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.body_parts == rhs.body_parts &&
    lhs.id_list == rhs.id_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator1> & lhs, const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87f4ca9ce44f7e39ae96c9a7bde4f0da";
  }

  static const char* value(const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87f4ca9ce44f7e39ULL;
  static const uint64_t static_value2 = 0xae96c9a7bde4f0daULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_control_msgs/StartRecordTrajectory";
  }

  static const char* value(const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string[] body_parts # to record\n"
"int8[] id_list\n"
;
  }

  static const char* value(const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.body_parts);
      stream.next(m.id_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartRecordTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_control_msgs::StartRecordTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "body_parts[]" << std::endl;
    for (size_t i = 0; i < v.body_parts.size(); ++i)
    {
      s << indent << "  body_parts[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.body_parts[i]);
    }
    s << indent << "id_list[]" << std::endl;
    for (size_t i = 0; i < v.id_list.size(); ++i)
    {
      s << indent << "  id_list[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.id_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_CONTROL_MSGS_MESSAGE_STARTRECORDTRAJECTORY_H
