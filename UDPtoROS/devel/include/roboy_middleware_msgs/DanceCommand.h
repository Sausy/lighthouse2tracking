// Generated by gencpp from file roboy_middleware_msgs/DanceCommand.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_DANCECOMMAND_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_DANCECOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct DanceCommand_
{
  typedef DanceCommand_<ContainerAllocator> Type;

  DanceCommand_()
    : sensor_id(0)
    , pos()  {
    }
  DanceCommand_(const ContainerAllocator& _alloc)
    : sensor_id(0)
    , pos(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> const> ConstPtr;

}; // struct DanceCommand_

typedef ::roboy_middleware_msgs::DanceCommand_<std::allocator<void> > DanceCommand;

typedef boost::shared_ptr< ::roboy_middleware_msgs::DanceCommand > DanceCommandPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::DanceCommand const> DanceCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_id == rhs.sensor_id &&
    lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72a157af84f4f4cbc154d8d824d39082";
  }

  static const char* value(const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72a157af84f4f4cbULL;
  static const uint64_t static_value2 = 0xc154d8d824d39082ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/DanceCommand";
  }

  static const char* value(const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 sensor_id\n"
"geometry_msgs/Vector3 pos\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_id);
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DanceCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::DanceCommand_<ContainerAllocator>& v)
  {
    s << indent << "sensor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_DANCECOMMAND_H
