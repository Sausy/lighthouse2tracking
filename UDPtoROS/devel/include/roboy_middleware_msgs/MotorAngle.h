// Generated by gencpp from file roboy_middleware_msgs/MotorAngle.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORANGLE_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct MotorAngle_
{
  typedef MotorAngle_<ContainerAllocator> Type;

  MotorAngle_()
    : id(0)
    , angles()
    , raw_angles()
    , raw_angles_prev()
    , offset_angles()
    , relative_angles()
    , rev_counter()  {
    }
  MotorAngle_(const ContainerAllocator& _alloc)
    : id(0)
    , angles(_alloc)
    , raw_angles(_alloc)
    , raw_angles_prev(_alloc)
    , offset_angles(_alloc)
    , relative_angles(_alloc)
    , rev_counter(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angles_type;
  _angles_type angles;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _raw_angles_type;
  _raw_angles_type raw_angles;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _raw_angles_prev_type;
  _raw_angles_prev_type raw_angles_prev;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _offset_angles_type;
  _offset_angles_type offset_angles;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _relative_angles_type;
  _relative_angles_type relative_angles;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _rev_counter_type;
  _rev_counter_type rev_counter;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> const> ConstPtr;

}; // struct MotorAngle_

typedef ::roboy_middleware_msgs::MotorAngle_<std::allocator<void> > MotorAngle;

typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorAngle > MotorAnglePtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorAngle const> MotorAngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.angles == rhs.angles &&
    lhs.raw_angles == rhs.raw_angles &&
    lhs.raw_angles_prev == rhs.raw_angles_prev &&
    lhs.offset_angles == rhs.offset_angles &&
    lhs.relative_angles == rhs.relative_angles &&
    lhs.rev_counter == rhs.rev_counter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74ec1ac15dd8a5dd0a5669e1aac02ac8";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74ec1ac15dd8a5ddULL;
  static const uint64_t static_value2 = 0x0a5669e1aac02ac8ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/MotorAngle";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n"
"float32[] angles\n"
"int32[] raw_angles\n"
"int32[] raw_angles_prev\n"
"int32[] offset_angles\n"
"int32[] relative_angles\n"
"int32[] rev_counter\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.angles);
      stream.next(m.raw_angles);
      stream.next(m.raw_angles_prev);
      stream.next(m.offset_angles);
      stream.next(m.relative_angles);
      stream.next(m.rev_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::MotorAngle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "raw_angles[]" << std::endl;
    for (size_t i = 0; i < v.raw_angles.size(); ++i)
    {
      s << indent << "  raw_angles[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.raw_angles[i]);
    }
    s << indent << "raw_angles_prev[]" << std::endl;
    for (size_t i = 0; i < v.raw_angles_prev.size(); ++i)
    {
      s << indent << "  raw_angles_prev[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.raw_angles_prev[i]);
    }
    s << indent << "offset_angles[]" << std::endl;
    for (size_t i = 0; i < v.offset_angles.size(); ++i)
    {
      s << indent << "  offset_angles[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.offset_angles[i]);
    }
    s << indent << "relative_angles[]" << std::endl;
    for (size_t i = 0; i < v.relative_angles.size(); ++i)
    {
      s << indent << "  relative_angles[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.relative_angles[i]);
    }
    s << indent << "rev_counter[]" << std::endl;
    for (size_t i = 0; i < v.rev_counter.size(); ++i)
    {
      s << indent << "  rev_counter[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.rev_counter[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORANGLE_H
