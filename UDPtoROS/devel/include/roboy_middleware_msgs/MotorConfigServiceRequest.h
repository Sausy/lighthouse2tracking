// Generated by gencpp from file roboy_middleware_msgs/MotorConfigServiceRequest.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIGSERVICEREQUEST_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIGSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roboy_middleware_msgs/MotorConfig.h>

namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct MotorConfigServiceRequest_
{
  typedef MotorConfigServiceRequest_<ContainerAllocator> Type;

  MotorConfigServiceRequest_()
    : config()  {
    }
  MotorConfigServiceRequest_(const ContainerAllocator& _alloc)
    : config(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator>  _config_type;
  _config_type config;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MotorConfigServiceRequest_

typedef ::roboy_middleware_msgs::MotorConfigServiceRequest_<std::allocator<void> > MotorConfigServiceRequest;

typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfigServiceRequest > MotorConfigServiceRequestPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::MotorConfigServiceRequest const> MotorConfigServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.config == rhs.config;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d32584b2ec7f004e59401de3a4cea084";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd32584b2ec7f004eULL;
  static const uint64_t static_value2 = 0x59401de3a4cea084ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/MotorConfigServiceRequest";
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorConfig config\n"
"\n"
"================================================================================\n"
"MSG: roboy_middleware_msgs/MotorConfig\n"
"int32 id\n"
"uint8[] motors\n"
"uint8[] control_mode\n"
"int32[] output_pos_max\n"
"int32[] output_neg_max\n"
"int32[] sp_pos_max\n"
"int32[] sp_neg_max\n"
"uint16[] kp\n"
"uint16[] ki\n"
"uint16[] kd\n"
"uint16[] forward_gain\n"
"uint16[] dead_band\n"
"int32[] integral_pos_max\n"
"int32[] integral_neg_max\n"
"int32[] output_divider\n"
"int32[] setpoint\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.config);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorConfigServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::MotorConfigServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "config: ";
    s << std::endl;
    Printer< ::roboy_middleware_msgs::MotorConfig_<ContainerAllocator> >::stream(s, indent + "  ", v.config);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_MOTORCONFIGSERVICEREQUEST_H
