// Generated by gencpp from file roboy_middleware_msgs/SystemCheckResponse.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_SYSTEMCHECKRESPONSE_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_SYSTEMCHECKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct SystemCheckResponse_
{
  typedef SystemCheckResponse_<ContainerAllocator> Type;

  SystemCheckResponse_()
    : position()
    , displacement()  {
    }
  SystemCheckResponse_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , displacement(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _position_type;
  _position_type position;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _displacement_type;
  _displacement_type displacement;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SystemCheckResponse_

typedef ::roboy_middleware_msgs::SystemCheckResponse_<std::allocator<void> > SystemCheckResponse;

typedef boost::shared_ptr< ::roboy_middleware_msgs::SystemCheckResponse > SystemCheckResponsePtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::SystemCheckResponse const> SystemCheckResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.displacement == rhs.displacement;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator1> & lhs, const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b2adf9f4e24ef5dc53bf57a7793ebcb";
  }

  static const char* value(const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b2adf9f4e24ef5dULL;
  static const uint64_t static_value2 = 0xc53bf57a7793ebcbULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/SystemCheckResponse";
  }

  static const char* value(const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool[] position\n"
"bool[] displacement\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.displacement);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemCheckResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::SystemCheckResponse_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "displacement[]" << std::endl;
    for (size_t i = 0; i < v.displacement.size(); ++i)
    {
      s << indent << "  displacement[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.displacement[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_SYSTEMCHECKRESPONSE_H
