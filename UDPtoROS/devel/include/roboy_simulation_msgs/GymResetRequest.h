// Generated by gencpp from file roboy_simulation_msgs/GymResetRequest.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_GYMRESETREQUEST_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_GYMRESETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct GymResetRequest_
{
  typedef GymResetRequest_<ContainerAllocator> Type;

  GymResetRequest_()
    : step_size(0.0)  {
    }
  GymResetRequest_(const ContainerAllocator& _alloc)
    : step_size(0.0)  {
  (void)_alloc;
    }



   typedef double _step_size_type;
  _step_size_type step_size;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GymResetRequest_

typedef ::roboy_simulation_msgs::GymResetRequest_<std::allocator<void> > GymResetRequest;

typedef boost::shared_ptr< ::roboy_simulation_msgs::GymResetRequest > GymResetRequestPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::GymResetRequest const> GymResetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.step_size == rhs.step_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76290af81b223bb4ba79cf43558301b6";
  }

  static const char* value(const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76290af81b223bb4ULL;
  static const uint64_t static_value2 = 0xba79cf43558301b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/GymResetRequest";
  }

  static const char* value(const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 step_size\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GymResetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::GymResetRequest_<ContainerAllocator>& v)
  {
    s << indent << "step_size: ";
    Printer<double>::stream(s, indent + "  ", v.step_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_GYMRESETREQUEST_H
