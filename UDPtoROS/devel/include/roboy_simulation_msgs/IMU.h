// Generated by gencpp from file roboy_simulation_msgs/IMU.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_IMU_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct IMU_
{
  typedef IMU_<ContainerAllocator> Type;

  IMU_()
    : roboy_id(0)
    , link()
    , lin_accel_world()
    , ang_vel_world()  {
    }
  IMU_(const ContainerAllocator& _alloc)
    : roboy_id(0)
    , link(_alloc)
    , lin_accel_world(_alloc)
    , ang_vel_world(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _roboy_id_type;
  _roboy_id_type roboy_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _link_type;
  _link_type link;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lin_accel_world_type;
  _lin_accel_world_type lin_accel_world;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ang_vel_world_type;
  _ang_vel_world_type ang_vel_world;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::IMU_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_

typedef ::roboy_simulation_msgs::IMU_<std::allocator<void> > IMU;

typedef boost::shared_ptr< ::roboy_simulation_msgs::IMU > IMUPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::IMU const> IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::IMU_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::IMU_<ContainerAllocator2> & rhs)
{
  return lhs.roboy_id == rhs.roboy_id &&
    lhs.link == rhs.link &&
    lhs.lin_accel_world == rhs.lin_accel_world &&
    lhs.ang_vel_world == rhs.ang_vel_world;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::IMU_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::IMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::IMU_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43bd0ffc55a345c6db23ba4b7f7d9cbc";
  }

  static const char* value(const ::roboy_simulation_msgs::IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43bd0ffc55a345c6ULL;
  static const uint64_t static_value2 = 0xdb23ba4b7f7d9cbcULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/IMU";
  }

  static const char* value(const ::roboy_simulation_msgs::IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 roboy_id\n"
"string link\n"
"geometry_msgs/Point lin_accel_world\n"
"geometry_msgs/Point ang_vel_world\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roboy_id);
      stream.next(m.link);
      stream.next(m.lin_accel_world);
      stream.next(m.ang_vel_world);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::IMU_<ContainerAllocator>& v)
  {
    s << indent << "roboy_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roboy_id);
    s << indent << "link: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link);
    s << indent << "lin_accel_world: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lin_accel_world);
    s << indent << "ang_vel_world: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ang_vel_world);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_IMU_H
