// Generated by gencpp from file roboy_simulation_msgs/Model.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_MODEL_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_MODEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct Model_
{
  typedef Model_<ContainerAllocator> Type;

  Model_()
    : operation(0)
    , type(0)
    , objects()
    , positions()  {
    }
  Model_(const ContainerAllocator& _alloc)
    : operation(0)
    , type(0)
    , objects(_alloc)
    , positions(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _operation_type;
  _operation_type operation;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _objects_type;
  _objects_type objects;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _positions_type;
  _positions_type positions;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::Model_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::Model_<ContainerAllocator> const> ConstPtr;

}; // struct Model_

typedef ::roboy_simulation_msgs::Model_<std::allocator<void> > Model;

typedef boost::shared_ptr< ::roboy_simulation_msgs::Model > ModelPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::Model const> ModelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::Model_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::Model_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::Model_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Model_<ContainerAllocator2> & rhs)
{
  return lhs.operation == rhs.operation &&
    lhs.type == rhs.type &&
    lhs.objects == rhs.objects &&
    lhs.positions == rhs.positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::Model_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Model_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Model_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Model_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Model_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Model_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69efd5b13286c453a423cb8ab3a38313";
  }

  static const char* value(const ::roboy_simulation_msgs::Model_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69efd5b13286c453ULL;
  static const uint64_t static_value2 = 0xa423cb8ab3a38313ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/Model";
  }

  static const char* value(const ::roboy_simulation_msgs::Model_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Operation you want to call, either delete (0) or insert (1)\n"
"int32 operation\n"
"#Type, either world (0) or model (1)\n"
"int32 type\n"
"#Model(s) or world(s) to be used\n"
"string[] objects\n"
"#position(s) of object(s) @where they should be inserted\n"
"float32[] positions\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::Model_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::Model_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation);
      stream.next(m.type);
      stream.next(m.objects);
      stream.next(m.positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Model_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::Model_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::Model_<ContainerAllocator>& v)
  {
    s << indent << "operation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.operation);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.objects[i]);
    }
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_MODEL_H
