// Generated by gencpp from file roboy_simulation_msgs/Tendon.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_TENDON_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_TENDON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct Tendon_
{
  typedef Tendon_<ContainerAllocator> Type;

  Tendon_()
    : name()
    , force()
    , l()
    , ld()
    , number_of_viapoints()
    , viapoints()  {
    }
  Tendon_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , force(_alloc)
    , l(_alloc)
    , ld(_alloc)
    , number_of_viapoints(_alloc)
    , viapoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _force_type;
  _force_type force;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _l_type;
  _l_type l;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ld_type;
  _ld_type ld;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _number_of_viapoints_type;
  _number_of_viapoints_type number_of_viapoints;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _viapoints_type;
  _viapoints_type viapoints;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> const> ConstPtr;

}; // struct Tendon_

typedef ::roboy_simulation_msgs::Tendon_<std::allocator<void> > Tendon;

typedef boost::shared_ptr< ::roboy_simulation_msgs::Tendon > TendonPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::Tendon const> TendonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::Tendon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::Tendon_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Tendon_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.force == rhs.force &&
    lhs.l == rhs.l &&
    lhs.ld == rhs.ld &&
    lhs.number_of_viapoints == rhs.number_of_viapoints &&
    lhs.viapoints == rhs.viapoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::Tendon_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::Tendon_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfbbd8befae2be9a71d29542d37ed6bd";
  }

  static const char* value(const ::roboy_simulation_msgs::Tendon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfbbd8befae2be9aULL;
  static const uint64_t static_value2 = 0x71d29542d37ed6bdULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/Tendon";
  }

  static const char* value(const ::roboy_simulation_msgs::Tendon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# muscle names\n"
"string[] name\n"
"# force in Newton\n"
"float32[] force\n"
"# length in meter\n"
"float32[] l\n"
"# velocity in meter/s\n"
"float32[] ld\n"
"# number of viapoints\n"
"int32[] number_of_viapoints\n"
"# viapoints of the tendon in global coordinates\n"
"geometry_msgs/Vector3[] viapoints\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::Tendon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.force);
      stream.next(m.l);
      stream.next(m.ld);
      stream.next(m.number_of_viapoints);
      stream.next(m.viapoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tendon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::Tendon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::Tendon_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "force[]" << std::endl;
    for (size_t i = 0; i < v.force.size(); ++i)
    {
      s << indent << "  force[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.force[i]);
    }
    s << indent << "l[]" << std::endl;
    for (size_t i = 0; i < v.l.size(); ++i)
    {
      s << indent << "  l[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.l[i]);
    }
    s << indent << "ld[]" << std::endl;
    for (size_t i = 0; i < v.ld.size(); ++i)
    {
      s << indent << "  ld[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ld[i]);
    }
    s << indent << "number_of_viapoints[]" << std::endl;
    for (size_t i = 0; i < v.number_of_viapoints.size(); ++i)
    {
      s << indent << "  number_of_viapoints[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.number_of_viapoints[i]);
    }
    s << indent << "viapoints[]" << std::endl;
    for (size_t i = 0; i < v.viapoints.size(); ++i)
    {
      s << indent << "  viapoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.viapoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_TENDON_H
