// Generated by gencpp from file roboy_simulation_msgs/TendonInitialization.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_TENDONINITIALIZATION_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_TENDONINITIALIZATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct TendonInitialization_
{
  typedef TendonInitialization_<ContainerAllocator> Type;

  TendonInitialization_()
    : tendon_id(0)
    , max_force(0.0)
    , wirepoints()
    , roboy_parts()  {
    }
  TendonInitialization_(const ContainerAllocator& _alloc)
    : tendon_id(0)
    , max_force(0.0)
    , wirepoints(_alloc)
    , roboy_parts(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _tendon_id_type;
  _tendon_id_type tendon_id;

   typedef float _max_force_type;
  _max_force_type max_force;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _wirepoints_type;
  _wirepoints_type wirepoints;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _roboy_parts_type;
  _roboy_parts_type roboy_parts;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> const> ConstPtr;

}; // struct TendonInitialization_

typedef ::roboy_simulation_msgs::TendonInitialization_<std::allocator<void> > TendonInitialization;

typedef boost::shared_ptr< ::roboy_simulation_msgs::TendonInitialization > TendonInitializationPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::TendonInitialization const> TendonInitializationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator2> & rhs)
{
  return lhs.tendon_id == rhs.tendon_id &&
    lhs.max_force == rhs.max_force &&
    lhs.wirepoints == rhs.wirepoints &&
    lhs.roboy_parts == rhs.roboy_parts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7ee2d602d56209b5a118cdb0a171bf0";
  }

  static const char* value(const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7ee2d602d56209bULL;
  static const uint64_t static_value2 = 0x5a118cdb0a171bf0ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/TendonInitialization";
  }

  static const char* value(const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 tendon_id\n"
"#maximal applicable force	\n"
"float32 max_force\n"
"#world space coord, 3 floats == one coordinate\n"
"float32[] wirepoints\n"
"#names of roboypart each wirepoint is linked to\n"
"string[] roboy_parts\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tendon_id);
      stream.next(m.max_force);
      stream.next(m.wirepoints);
      stream.next(m.roboy_parts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TendonInitialization_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::TendonInitialization_<ContainerAllocator>& v)
  {
    s << indent << "tendon_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tendon_id);
    s << indent << "max_force: ";
    Printer<float>::stream(s, indent + "  ", v.max_force);
    s << indent << "wirepoints[]" << std::endl;
    for (size_t i = 0; i < v.wirepoints.size(); ++i)
    {
      s << indent << "  wirepoints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wirepoints[i]);
    }
    s << indent << "roboy_parts[]" << std::endl;
    for (size_t i = 0; i < v.roboy_parts.size(); ++i)
    {
      s << indent << "  roboy_parts[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.roboy_parts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_TENDONINITIALIZATION_H
