// Generated by gencpp from file roboy_simulation_msgs/UpdateControllerParametersRequest.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_UPDATECONTROLLERPARAMETERSREQUEST_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_UPDATECONTROLLERPARAMETERSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roboy_simulation_msgs/ControllerParameters.h>

namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct UpdateControllerParametersRequest_
{
  typedef UpdateControllerParametersRequest_<ContainerAllocator> Type;

  UpdateControllerParametersRequest_()
    : params()  {
    }
  UpdateControllerParametersRequest_(const ContainerAllocator& _alloc)
    : params(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roboy_simulation_msgs::ControllerParameters_<ContainerAllocator>  _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateControllerParametersRequest_

typedef ::roboy_simulation_msgs::UpdateControllerParametersRequest_<std::allocator<void> > UpdateControllerParametersRequest;

typedef boost::shared_ptr< ::roboy_simulation_msgs::UpdateControllerParametersRequest > UpdateControllerParametersRequestPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::UpdateControllerParametersRequest const> UpdateControllerParametersRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator2> & rhs)
{
  return lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator1> & lhs, const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b756c0585632134411ae7db8d90667b1";
  }

  static const char* value(const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb756c05856321344ULL;
  static const uint64_t static_value2 = 0x11ae7db8d90667b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/UpdateControllerParametersRequest";
  }

  static const char* value(const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/ControllerParameters params\n"
"\n"
"================================================================================\n"
"MSG: roboy_simulation_msgs/ControllerParameters\n"
"int32 roboy_id\n"
"float64 f_contact\n"
"float64 d_lift\n"
"float64 d_prep\n"
"float64 f_max\n"
"float64 psi_heading\n"
"float64 omega_heading\n"
"float64 v_forward\n"
"float64 v_com\n"
"float64 k_h\n"
"float64[] k_p_theta_left\n"
"float64[] k_p_theta_right\n"
"float64[] k_d_theta_left\n"
"float64[] k_d_theta_right\n"
"float64[] k_p_phi\n"
"float64[] k_d_phi\n"
"float64 k_v\n"
"float64 k_p\n"
"float64 k_q\n"
"float64 k_omega\n"
"float64 k_m_fplus\n"
"float64 c_hip_lift\n"
"float64 c_knee_lift\n"
"float64 c_stance_lift\n"
"float64 c_swing_prep\n"
"float64[] theta_groin_0\n"
"float64[] phi_groin_0\n"
"float64 theta_trunk_0\n"
"float64 phi_trunk_0\n"
"float64[] theta_knee\n"
"float64[] theta_ankle\n"
"float64[] d_s\n"
"float64[] d_c\n"
"float64[] v_s\n"
"float64[] v_c\n"
"float32 sim_time\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateControllerParametersRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::UpdateControllerParametersRequest_<ContainerAllocator>& v)
  {
    s << indent << "params: ";
    s << std::endl;
    Printer< ::roboy_simulation_msgs::ControllerParameters_<ContainerAllocator> >::stream(s, indent + "  ", v.params);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_UPDATECONTROLLERPARAMETERSREQUEST_H
