# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_control_msgs/LookAtGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LookAtGoal(genpy.Message):
  _md5sum = "7f48da693a0e6a39c4c3e11abc6ed7e6"
  _type = "roboy_control_msgs/LookAtGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
string endEffector
int32 yaw_joint_index
int32 pitch_joint_index
# 0: point in world frame
# 1: target frame relative to root_frame
# 2: target frame relative to root_frame single shot
int32 type
geometry_msgs/Vector3 point
string root_frame
string target_frame
bool sendToRealHardware
int32 timeout
float32 tolerance

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['endEffector','yaw_joint_index','pitch_joint_index','type','point','root_frame','target_frame','sendToRealHardware','timeout','tolerance']
  _slot_types = ['string','int32','int32','int32','geometry_msgs/Vector3','string','string','bool','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       endEffector,yaw_joint_index,pitch_joint_index,type,point,root_frame,target_frame,sendToRealHardware,timeout,tolerance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LookAtGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.endEffector is None:
        self.endEffector = ''
      if self.yaw_joint_index is None:
        self.yaw_joint_index = 0
      if self.pitch_joint_index is None:
        self.pitch_joint_index = 0
      if self.type is None:
        self.type = 0
      if self.point is None:
        self.point = geometry_msgs.msg.Vector3()
      if self.root_frame is None:
        self.root_frame = ''
      if self.target_frame is None:
        self.target_frame = ''
      if self.sendToRealHardware is None:
        self.sendToRealHardware = False
      if self.timeout is None:
        self.timeout = 0
      if self.tolerance is None:
        self.tolerance = 0.
    else:
      self.endEffector = ''
      self.yaw_joint_index = 0
      self.pitch_joint_index = 0
      self.type = 0
      self.point = geometry_msgs.msg.Vector3()
      self.root_frame = ''
      self.target_frame = ''
      self.sendToRealHardware = False
      self.timeout = 0
      self.tolerance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.endEffector
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3i3d().pack(_x.yaw_joint_index, _x.pitch_joint_index, _x.type, _x.point.x, _x.point.y, _x.point.z))
      _x = self.root_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.target_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bif().pack(_x.sendToRealHardware, _x.timeout, _x.tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.endEffector = str[start:end].decode('utf-8')
      else:
        self.endEffector = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.yaw_joint_index, _x.pitch_joint_index, _x.type, _x.point.x, _x.point.y, _x.point.z,) = _get_struct_3i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.root_frame = str[start:end].decode('utf-8')
      else:
        self.root_frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_frame = str[start:end].decode('utf-8')
      else:
        self.target_frame = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.sendToRealHardware, _x.timeout, _x.tolerance,) = _get_struct_Bif().unpack(str[start:end])
      self.sendToRealHardware = bool(self.sendToRealHardware)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.endEffector
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3i3d().pack(_x.yaw_joint_index, _x.pitch_joint_index, _x.type, _x.point.x, _x.point.y, _x.point.z))
      _x = self.root_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.target_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bif().pack(_x.sendToRealHardware, _x.timeout, _x.tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.endEffector = str[start:end].decode('utf-8')
      else:
        self.endEffector = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.yaw_joint_index, _x.pitch_joint_index, _x.type, _x.point.x, _x.point.y, _x.point.z,) = _get_struct_3i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.root_frame = str[start:end].decode('utf-8')
      else:
        self.root_frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_frame = str[start:end].decode('utf-8')
      else:
        self.target_frame = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.sendToRealHardware, _x.timeout, _x.tolerance,) = _get_struct_Bif().unpack(str[start:end])
      self.sendToRealHardware = bool(self.sendToRealHardware)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bif = None
def _get_struct_Bif():
    global _struct_Bif
    if _struct_Bif is None:
        _struct_Bif = struct.Struct("<Bif")
    return _struct_Bif
_struct_3i3d = None
def _get_struct_3i3d():
    global _struct_3i3d
    if _struct_3i3d is None:
        _struct_3i3d = struct.Struct("<3i3d")
    return _struct_3i3d
