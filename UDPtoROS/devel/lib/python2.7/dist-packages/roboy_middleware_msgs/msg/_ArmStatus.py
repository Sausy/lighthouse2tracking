# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/ArmStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ArmStatus(genpy.Message):
  _md5sum = "32e4d7965075582ce76a819199877dad"
  _type = "roboy_middleware_msgs/ArmStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 id
# six current measurements per arm board
uint16[] current
float32[] gyro_x
float32[] gyro_y
float32[] gyro_z
float32[] acc_x
float32[] acc_y
float32[] acc_z
float32 elbow_joint_angle
float32 elbow_joint_angle_setpoint
int32 elbow_agonist_setpoint
int32 elbow_antagonist_setpoint
float32 wrist_joint_angle
float32 wrist_joint_angle_setpoint
int32 wrist_agonist_setpoint
int32 wrist_antagonist_setpoint"""
  __slots__ = ['id','current','gyro_x','gyro_y','gyro_z','acc_x','acc_y','acc_z','elbow_joint_angle','elbow_joint_angle_setpoint','elbow_agonist_setpoint','elbow_antagonist_setpoint','wrist_joint_angle','wrist_joint_angle_setpoint','wrist_agonist_setpoint','wrist_antagonist_setpoint']
  _slot_types = ['uint8','uint16[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32','float32','int32','int32','float32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,current,gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z,elbow_joint_angle,elbow_joint_angle_setpoint,elbow_agonist_setpoint,elbow_antagonist_setpoint,wrist_joint_angle,wrist_joint_angle_setpoint,wrist_agonist_setpoint,wrist_antagonist_setpoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.current is None:
        self.current = []
      if self.gyro_x is None:
        self.gyro_x = []
      if self.gyro_y is None:
        self.gyro_y = []
      if self.gyro_z is None:
        self.gyro_z = []
      if self.acc_x is None:
        self.acc_x = []
      if self.acc_y is None:
        self.acc_y = []
      if self.acc_z is None:
        self.acc_z = []
      if self.elbow_joint_angle is None:
        self.elbow_joint_angle = 0.
      if self.elbow_joint_angle_setpoint is None:
        self.elbow_joint_angle_setpoint = 0.
      if self.elbow_agonist_setpoint is None:
        self.elbow_agonist_setpoint = 0
      if self.elbow_antagonist_setpoint is None:
        self.elbow_antagonist_setpoint = 0
      if self.wrist_joint_angle is None:
        self.wrist_joint_angle = 0.
      if self.wrist_joint_angle_setpoint is None:
        self.wrist_joint_angle_setpoint = 0.
      if self.wrist_agonist_setpoint is None:
        self.wrist_agonist_setpoint = 0
      if self.wrist_antagonist_setpoint is None:
        self.wrist_antagonist_setpoint = 0
    else:
      self.id = 0
      self.current = []
      self.gyro_x = []
      self.gyro_y = []
      self.gyro_z = []
      self.acc_x = []
      self.acc_y = []
      self.acc_z = []
      self.elbow_joint_angle = 0.
      self.elbow_joint_angle_setpoint = 0.
      self.elbow_agonist_setpoint = 0
      self.elbow_antagonist_setpoint = 0
      self.wrist_joint_angle = 0.
      self.wrist_joint_angle_setpoint = 0.
      self.wrist_agonist_setpoint = 0
      self.wrist_antagonist_setpoint = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.id))
      length = len(self.current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.current))
      length = len(self.gyro_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.gyro_x))
      length = len(self.gyro_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.gyro_y))
      length = len(self.gyro_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.gyro_z))
      length = len(self.acc_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.acc_x))
      length = len(self.acc_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.acc_y))
      length = len(self.acc_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.acc_z))
      _x = self
      buff.write(_get_struct_2f2i2f2i().pack(_x.elbow_joint_angle, _x.elbow_joint_angle_setpoint, _x.elbow_agonist_setpoint, _x.elbow_antagonist_setpoint, _x.wrist_joint_angle, _x.wrist_joint_angle_setpoint, _x.wrist_agonist_setpoint, _x.wrist_antagonist_setpoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.current = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gyro_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gyro_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gyro_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.acc_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.acc_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.acc_z = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.elbow_joint_angle, _x.elbow_joint_angle_setpoint, _x.elbow_agonist_setpoint, _x.elbow_antagonist_setpoint, _x.wrist_joint_angle, _x.wrist_joint_angle_setpoint, _x.wrist_agonist_setpoint, _x.wrist_antagonist_setpoint,) = _get_struct_2f2i2f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.id))
      length = len(self.current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.current.tostring())
      length = len(self.gyro_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.gyro_x.tostring())
      length = len(self.gyro_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.gyro_y.tostring())
      length = len(self.gyro_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.gyro_z.tostring())
      length = len(self.acc_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.acc_x.tostring())
      length = len(self.acc_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.acc_y.tostring())
      length = len(self.acc_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.acc_z.tostring())
      _x = self
      buff.write(_get_struct_2f2i2f2i().pack(_x.elbow_joint_angle, _x.elbow_joint_angle_setpoint, _x.elbow_agonist_setpoint, _x.elbow_antagonist_setpoint, _x.wrist_joint_angle, _x.wrist_joint_angle_setpoint, _x.wrist_agonist_setpoint, _x.wrist_antagonist_setpoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.current = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gyro_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gyro_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gyro_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.acc_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.acc_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.acc_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 32
      (_x.elbow_joint_angle, _x.elbow_joint_angle_setpoint, _x.elbow_agonist_setpoint, _x.elbow_antagonist_setpoint, _x.wrist_joint_angle, _x.wrist_joint_angle_setpoint, _x.wrist_agonist_setpoint, _x.wrist_antagonist_setpoint,) = _get_struct_2f2i2f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2i2f2i = None
def _get_struct_2f2i2f2i():
    global _struct_2f2i2f2i
    if _struct_2f2i2f2i is None:
        _struct_2f2i2f2i = struct.Struct("<2f2i2f2i")
    return _struct_2f2i2f2i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
