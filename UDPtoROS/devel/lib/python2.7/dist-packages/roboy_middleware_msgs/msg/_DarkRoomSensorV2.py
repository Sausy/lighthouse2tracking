# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/DarkRoomSensorV2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DarkRoomSensorV2(genpy.Message):
  _md5sum = "33742585e0d9d4936d60498b07ad60de"
  _type = "roboy_middleware_msgs/DarkRoomSensorV2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string object_id
int8 base
int8 SensorID
float64 elevation
float64 azimuth
"""
  __slots__ = ['object_id','base','SensorID','elevation','azimuth']
  _slot_types = ['string','int8','int8','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_id,base,SensorID,elevation,azimuth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DarkRoomSensorV2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_id is None:
        self.object_id = ''
      if self.base is None:
        self.base = 0
      if self.SensorID is None:
        self.SensorID = 0
      if self.elevation is None:
        self.elevation = 0.
      if self.azimuth is None:
        self.azimuth = 0.
    else:
      self.object_id = ''
      self.base = 0
      self.SensorID = 0
      self.elevation = 0.
      self.azimuth = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.object_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2b2d().pack(_x.base, _x.SensorID, _x.elevation, _x.azimuth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_id = str[start:end].decode('utf-8')
      else:
        self.object_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.base, _x.SensorID, _x.elevation, _x.azimuth,) = _get_struct_2b2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.object_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2b2d().pack(_x.base, _x.SensorID, _x.elevation, _x.azimuth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_id = str[start:end].decode('utf-8')
      else:
        self.object_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.base, _x.SensorID, _x.elevation, _x.azimuth,) = _get_struct_2b2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b2d = None
def _get_struct_2b2d():
    global _struct_2b2d
    if _struct_2b2d is None:
        _struct_2b2d = struct.Struct("<2b2d")
    return _struct_2b2d
