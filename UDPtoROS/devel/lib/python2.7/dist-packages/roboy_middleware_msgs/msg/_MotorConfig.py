# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/MotorConfig.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorConfig(genpy.Message):
  _md5sum = "c59b5188ed0d7529ac35ce108ce30bbc"
  _type = "roboy_middleware_msgs/MotorConfig"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id
uint8[] motors
uint8[] control_mode
int32[] output_pos_max
int32[] output_neg_max
int32[] sp_pos_max
int32[] sp_neg_max
uint16[] kp
uint16[] ki
uint16[] kd
uint16[] forward_gain
uint16[] dead_band
int32[] integral_pos_max
int32[] integral_neg_max
int32[] output_divider
int32[] setpoint"""
  __slots__ = ['id','motors','control_mode','output_pos_max','output_neg_max','sp_pos_max','sp_neg_max','kp','ki','kd','forward_gain','dead_band','integral_pos_max','integral_neg_max','output_divider','setpoint']
  _slot_types = ['int32','uint8[]','uint8[]','int32[]','int32[]','int32[]','int32[]','uint16[]','uint16[]','uint16[]','uint16[]','uint16[]','int32[]','int32[]','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,motors,control_mode,output_pos_max,output_neg_max,sp_pos_max,sp_neg_max,kp,ki,kd,forward_gain,dead_band,integral_pos_max,integral_neg_max,output_divider,setpoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorConfig, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.motors is None:
        self.motors = b''
      if self.control_mode is None:
        self.control_mode = b''
      if self.output_pos_max is None:
        self.output_pos_max = []
      if self.output_neg_max is None:
        self.output_neg_max = []
      if self.sp_pos_max is None:
        self.sp_pos_max = []
      if self.sp_neg_max is None:
        self.sp_neg_max = []
      if self.kp is None:
        self.kp = []
      if self.ki is None:
        self.ki = []
      if self.kd is None:
        self.kd = []
      if self.forward_gain is None:
        self.forward_gain = []
      if self.dead_band is None:
        self.dead_band = []
      if self.integral_pos_max is None:
        self.integral_pos_max = []
      if self.integral_neg_max is None:
        self.integral_neg_max = []
      if self.output_divider is None:
        self.output_divider = []
      if self.setpoint is None:
        self.setpoint = []
    else:
      self.id = 0
      self.motors = b''
      self.control_mode = b''
      self.output_pos_max = []
      self.output_neg_max = []
      self.sp_pos_max = []
      self.sp_neg_max = []
      self.kp = []
      self.ki = []
      self.kd = []
      self.forward_gain = []
      self.dead_band = []
      self.integral_pos_max = []
      self.integral_neg_max = []
      self.output_divider = []
      self.setpoint = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.id))
      _x = self.motors
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.control_mode
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.output_pos_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.output_pos_max))
      length = len(self.output_neg_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.output_neg_max))
      length = len(self.sp_pos_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.sp_pos_max))
      length = len(self.sp_neg_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.sp_neg_max))
      length = len(self.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.kp))
      length = len(self.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.ki))
      length = len(self.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.kd))
      length = len(self.forward_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.forward_gain))
      length = len(self.dead_band)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.dead_band))
      length = len(self.integral_pos_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.integral_pos_max))
      length = len(self.integral_neg_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.integral_neg_max))
      length = len(self.output_divider)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.output_divider))
      length = len(self.setpoint)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.setpoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.motors = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.control_mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.output_pos_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.output_neg_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.sp_pos_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.sp_neg_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.kp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.ki = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.kd = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.forward_gain = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.dead_band = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.integral_pos_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.integral_neg_max = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.output_divider = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.setpoint = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.id))
      _x = self.motors
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.control_mode
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.output_pos_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.output_pos_max.tostring())
      length = len(self.output_neg_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.output_neg_max.tostring())
      length = len(self.sp_pos_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.sp_pos_max.tostring())
      length = len(self.sp_neg_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.sp_neg_max.tostring())
      length = len(self.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.kp.tostring())
      length = len(self.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.ki.tostring())
      length = len(self.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.kd.tostring())
      length = len(self.forward_gain)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.forward_gain.tostring())
      length = len(self.dead_band)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.dead_band.tostring())
      length = len(self.integral_pos_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.integral_pos_max.tostring())
      length = len(self.integral_neg_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.integral_neg_max.tostring())
      length = len(self.output_divider)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.output_divider.tostring())
      length = len(self.setpoint)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.setpoint.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.motors = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.control_mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.output_pos_max = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.output_neg_max = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.sp_pos_max = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.sp_neg_max = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.kp = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.ki = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.kd = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.forward_gain = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.dead_band = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.integral_pos_max = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.integral_neg_max = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.output_divider = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.setpoint = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
