# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/JointControllerRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointControllerRequest(genpy.Message):
  _md5sum = "8c2b216fbd74af3eb65d1ca2f72cefc3"
  _type = "roboy_middleware_msgs/JointControllerRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool elbow_control_enable
int32 kp_elbow_joint
int32 kd_elbow_joint
int32 kp_elbow_agonist
int32 kd_elbow_agonist
int32 kp_elbow_antagonist
int32 kd_elbow_antagonist
int32 elbow_deadband
int32 elbow_pretension
bool wrist_control_enable
int32 kp_wrist_joint
int32 kd_wrist_joint
int32 kp_wrist_agonist
int32 kd_wrist_agonist
int32 kp_wrist_antagonist
int32 kd_wrist_antagonist
int32 wrist_deadband
int32 wrist_pretension
"""
  __slots__ = ['elbow_control_enable','kp_elbow_joint','kd_elbow_joint','kp_elbow_agonist','kd_elbow_agonist','kp_elbow_antagonist','kd_elbow_antagonist','elbow_deadband','elbow_pretension','wrist_control_enable','kp_wrist_joint','kd_wrist_joint','kp_wrist_agonist','kd_wrist_agonist','kp_wrist_antagonist','kd_wrist_antagonist','wrist_deadband','wrist_pretension']
  _slot_types = ['bool','int32','int32','int32','int32','int32','int32','int32','int32','bool','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       elbow_control_enable,kp_elbow_joint,kd_elbow_joint,kp_elbow_agonist,kd_elbow_agonist,kp_elbow_antagonist,kd_elbow_antagonist,elbow_deadband,elbow_pretension,wrist_control_enable,kp_wrist_joint,kd_wrist_joint,kp_wrist_agonist,kd_wrist_agonist,kp_wrist_antagonist,kd_wrist_antagonist,wrist_deadband,wrist_pretension

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointControllerRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.elbow_control_enable is None:
        self.elbow_control_enable = False
      if self.kp_elbow_joint is None:
        self.kp_elbow_joint = 0
      if self.kd_elbow_joint is None:
        self.kd_elbow_joint = 0
      if self.kp_elbow_agonist is None:
        self.kp_elbow_agonist = 0
      if self.kd_elbow_agonist is None:
        self.kd_elbow_agonist = 0
      if self.kp_elbow_antagonist is None:
        self.kp_elbow_antagonist = 0
      if self.kd_elbow_antagonist is None:
        self.kd_elbow_antagonist = 0
      if self.elbow_deadband is None:
        self.elbow_deadband = 0
      if self.elbow_pretension is None:
        self.elbow_pretension = 0
      if self.wrist_control_enable is None:
        self.wrist_control_enable = False
      if self.kp_wrist_joint is None:
        self.kp_wrist_joint = 0
      if self.kd_wrist_joint is None:
        self.kd_wrist_joint = 0
      if self.kp_wrist_agonist is None:
        self.kp_wrist_agonist = 0
      if self.kd_wrist_agonist is None:
        self.kd_wrist_agonist = 0
      if self.kp_wrist_antagonist is None:
        self.kp_wrist_antagonist = 0
      if self.kd_wrist_antagonist is None:
        self.kd_wrist_antagonist = 0
      if self.wrist_deadband is None:
        self.wrist_deadband = 0
      if self.wrist_pretension is None:
        self.wrist_pretension = 0
    else:
      self.elbow_control_enable = False
      self.kp_elbow_joint = 0
      self.kd_elbow_joint = 0
      self.kp_elbow_agonist = 0
      self.kd_elbow_agonist = 0
      self.kp_elbow_antagonist = 0
      self.kd_elbow_antagonist = 0
      self.elbow_deadband = 0
      self.elbow_pretension = 0
      self.wrist_control_enable = False
      self.kp_wrist_joint = 0
      self.kd_wrist_joint = 0
      self.kp_wrist_agonist = 0
      self.kd_wrist_agonist = 0
      self.kp_wrist_antagonist = 0
      self.kd_wrist_antagonist = 0
      self.wrist_deadband = 0
      self.wrist_pretension = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B8iB8i().pack(_x.elbow_control_enable, _x.kp_elbow_joint, _x.kd_elbow_joint, _x.kp_elbow_agonist, _x.kd_elbow_agonist, _x.kp_elbow_antagonist, _x.kd_elbow_antagonist, _x.elbow_deadband, _x.elbow_pretension, _x.wrist_control_enable, _x.kp_wrist_joint, _x.kd_wrist_joint, _x.kp_wrist_agonist, _x.kd_wrist_agonist, _x.kp_wrist_antagonist, _x.kd_wrist_antagonist, _x.wrist_deadband, _x.wrist_pretension))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 66
      (_x.elbow_control_enable, _x.kp_elbow_joint, _x.kd_elbow_joint, _x.kp_elbow_agonist, _x.kd_elbow_agonist, _x.kp_elbow_antagonist, _x.kd_elbow_antagonist, _x.elbow_deadband, _x.elbow_pretension, _x.wrist_control_enable, _x.kp_wrist_joint, _x.kd_wrist_joint, _x.kp_wrist_agonist, _x.kd_wrist_agonist, _x.kp_wrist_antagonist, _x.kd_wrist_antagonist, _x.wrist_deadband, _x.wrist_pretension,) = _get_struct_B8iB8i().unpack(str[start:end])
      self.elbow_control_enable = bool(self.elbow_control_enable)
      self.wrist_control_enable = bool(self.wrist_control_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B8iB8i().pack(_x.elbow_control_enable, _x.kp_elbow_joint, _x.kd_elbow_joint, _x.kp_elbow_agonist, _x.kd_elbow_agonist, _x.kp_elbow_antagonist, _x.kd_elbow_antagonist, _x.elbow_deadband, _x.elbow_pretension, _x.wrist_control_enable, _x.kp_wrist_joint, _x.kd_wrist_joint, _x.kp_wrist_agonist, _x.kd_wrist_agonist, _x.kp_wrist_antagonist, _x.kd_wrist_antagonist, _x.wrist_deadband, _x.wrist_pretension))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 66
      (_x.elbow_control_enable, _x.kp_elbow_joint, _x.kd_elbow_joint, _x.kp_elbow_agonist, _x.kd_elbow_agonist, _x.kp_elbow_antagonist, _x.kd_elbow_antagonist, _x.elbow_deadband, _x.elbow_pretension, _x.wrist_control_enable, _x.kp_wrist_joint, _x.kd_wrist_joint, _x.kp_wrist_agonist, _x.kd_wrist_agonist, _x.kp_wrist_antagonist, _x.kd_wrist_antagonist, _x.wrist_deadband, _x.wrist_pretension,) = _get_struct_B8iB8i().unpack(str[start:end])
      self.elbow_control_enable = bool(self.elbow_control_enable)
      self.wrist_control_enable = bool(self.wrist_control_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B8iB8i = None
def _get_struct_B8iB8i():
    global _struct_B8iB8i
    if _struct_B8iB8i is None:
        _struct_B8iB8i = struct.Struct("<B8iB8i")
    return _struct_B8iB8i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_middleware_msgs/JointControllerResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointControllerResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "roboy_middleware_msgs/JointControllerResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointControllerResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class JointController(object):
  _type          = 'roboy_middleware_msgs/JointController'
  _md5sum = '8c2b216fbd74af3eb65d1ca2f72cefc3'
  _request_class  = JointControllerRequest
  _response_class = JointControllerResponse
