module ts4231_datastream #(parameter CLK_FREQ_HZ = 50_000_000)
  (
    input clock,  // clock
    input reset,  // reset

    input allow_capture,

    input envelope_input,
    input data_input,

    output [500:0] data[0:10],
    output [7:0] register_counter_data;
    output capture_done,

    output dbg_out1
  );

  //AFTER a time of 600-900ns (just say 1us) where Data is low
  //
  //
  localparam TIMEOUT_MAX = 50;//CLK_FREQ_HZ/1_000_000;

  reg [500:0] byte_stream[0:10]; //PS.: acess byte_stream[0-10]    byte_stream[0-10][0:500]
  reg flag_DATA_present;
  reg [7:0] ring_loop_cnt;//output [7:0] register_counter_data;
  //reg [7:0] bit_cnt;

  //reg rec_data;
  reg flag_stream_valid;

  reg flag_data_timeout;
  reg [15:0] flag_data_timeout_cnt;

  //DEBUG
  reg [15:0] dbg_cnt;

  always @(posedge clock, posedge reset) begin: BIT2BYTE
    if(reset)begin
      flag_DATA_present <= 0;
      ring_loop_cnt <= 0;
      //bit_cnt <= 0;
      flag_stream_valid <= 0;
      flag_data_timeout <= 0;
      flag_data_timeout_cnt <= 0;
      capture_done <= 0;
      byte_stream <= 0;
      dbg_cnt <= 0;
      register_counter_data <= 0;
    end else begin
      if(!envelope_input)begin
        flag_stream_valid <= 1;
        flag_data_timeout_cnt <= 0;
      end

      //collects data in buffer
      byte_stream[ring_loop_cnt] <= (byte_stream[ring_loop_cnt] << 1) |  data_input;
      if(ring_loop_cnt <= 1)begin
        register_counter_data <= 0;
      end else begin
        register_counter_data <= ring_loop_cnt-1;
      end

      dbg_cnt <= dbg_cnt + 1;
      if(dbg_cnt == 499)begin
        dbg_cnt <= 0;
        ring_loop_cnt <= ring_loop_cnt +1
        byte_stream[ring_loop_cnt+1] <= 0;
      end


      /*
      if(!data_input)begin
        flag_data_timeout_cnt <= flag_data_timeout_cnt + 1;
        if(flag_data_timeout_cnt >= TIMEOUT_MAX)begin //1us / (1/50 MHz) = 50 ... TIMEOUT_MAX
          byte_stream[ring_loop_cnt] <= 0;
        end
      end else begin
        flag_data_timeout <= 0;
        flag_data_timeout_cnt <= 0;
      end*/


    //DEBUG uncoment=normal
    /*
    //=== Starts and validates Datastream==
    if(data_input)begin
      flag_DATA_present <= 1;
      if(!flag_DATA_present)
        byte_stream[ring_loop_cnt] <= 0;
    end

    if(!envelope_input)begin
      capture_done <= 0;
      if(!flag_stream_valid)
        flag_stream_valid <= 1;
    end

    //=== finishes data capture ==
    if(flag_stream_valid)begin
      if(envelope_input)begin
        capture_done <= 1;
        ring_loop_cnt <= ring_loop_cnt + 8'd1;
        byte_stream[ring_loop_cnt+1] <= 0;
        flag_stream_valid <= 0;
        flag_DATA_present <= 0;
      end
    end*/

    if(!allow_capture)begin
      flag_DATA_present <= 0;
      ring_loop_cnt <= 0;
      flag_stream_valid <= 0;
      dbg_cnt <= 0;
      byte_stream <= 0;
    end

    //=== Overflow prevention ==
    if(ring_loop_cnt == 9)begin
      ring_loop_cnt <= 0;
      byte_stream[0] <= 0;
    end
  end

  endmodule
